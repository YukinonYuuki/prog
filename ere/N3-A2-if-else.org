# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Aninhamento de comandos if-else}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |

* Sumário

Comando =if-else=
- Normais
- Aninhados (simples e compostos)
Exercícios
1. Calcular e informar as raízes de uma equação do 2o grau
2. Imprimir os três valores em ordem crescente
3. Mapeamento de código para resultado obedecendo tabela

* Comandos de seleção condicional

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula05_slide_16.pdf}{Prof. Edison Pignaton de Freitas}

* Funcionamento

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula05_slide_17.pdf}{Prof. Edison Pignaton de Freitas}

* Exemplo em Algoritmo

Fazer um programa que leia um número natural e informe se o número
lido é par ou ímpar.

#+latex: \pause\vfill

#+BEGIN_EXPORT latex
\setbeamertemplate{itemize/enumerate body begin}{\scriptsize}
\setbeamertemplate{itemize/enumerate subbody begin}{\tiny}
#+END_EXPORT

#+latex: {\scriptsize
Algoritmo ParOuÍmpar

{ Verifica se um valor lido do teclado é par ou ímpar }

entrada: o valor a ser testado

saídas: Mensagem de par ou ímpar

#+latex: \pause\vfill

1. Início
2. Ler o valor
3. Se o valor é par \\
      3.1 Escrever "Par" \\
   Senão \\
      3.2 Escrever "Ímpar"
4. Fim.
#+latex: }

#+latex: %\cortesia{../../../Algoritmos/Edison/Teoricas/aula05_slide_18.pdf}{Prof. Edison Pignaton de Freitas}

* Exemplo em C

Veja em [[./a05-par-impar.c]]

#+begin_src C :tangle e/a05-par-impar.c
// Programa para verificar se um nro natural lido é par ou impar
// Analisa o resto da divisao inteira por 2
#include<stdio.h>
int main()
{
  int valor;
  printf("Digite o valor a ser testado: ");
  scanf("%d", &valor);

  //analisa resto da divisao inteira
  if ( 0 == valor%2)
    printf("Valor eh par!\n");
  else
    printf("Valor eh impar!\n");
  return 0;
}
#+end_src
* Aninhamento com comandos simples

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula05_slide_20.pdf}{Prof. Edison Pignaton de Freitas}

* Revisitando a venda de livros

#+latex: {\small
Processar uma venda de livros em uma livraria. Obter código do tipo de
livro vendido (A, B, C) e número de unidades, calcular e informar
valor a pagar. Valores por tipo: A (R$10,00); B (R$20,00); C
(R$30,00). Caso tenham sido vendidos mais de 10 livros, emitir uma
mensagem.
#+latex: }

#+BEGIN_EXPORT latex
\setbeamertemplate{itemize/enumerate body begin}{\scriptsize}
\setbeamertemplate{itemize/enumerate subbody begin}{\tiny}
#+END_EXPORT

#+latex: {\scriptsize
Algoritmo ProcessaUmaVenda

{ processa uma venda e avisa caso tenham sido vendidas mais de 10 unidades }

entradas: codigo {do tipo do livro};
          quantidade {de livros vendidos}

saídas: total (valor total a ser pago);
        mensagem (caso mais de 10 unidades vendidas)

1. Início
2. Ler código e quantidade
3. Se código for A
   1. total = quantidade * 10;
4. Se código for B
   1. total = quantidade * 20;
5. Se código for C
   1. total = quantidade * 30;
6. Escrever total
7. Se quantidade maior que 10
   1. Escrever "mais de 10 livros vendidos"
8. Fim.
#+latex: }\pause

_Problema_: Repetição desnecessária dos testes

* Resolvendo o problema com aninhamento de ifs

#+BEGIN_EXPORT latex
\setbeamertemplate{itemize/enumerate body begin}{\scriptsize}
\setbeamertemplate{itemize/enumerate subbody begin}{\tiny}
#+END_EXPORT

#+latex: {\scriptsize
Algoritmo ProcessaUmaVenda

{ processa uma venda e avisa caso tenham sido vendidas mais de 10 unidades }

entradas: codigo {do tipo do livro};
          quantidade {de livros vendidos}

saídas: total (valor total a ser pago);
        mensagem (caso mais de 10 unidades vendidas)

1. Início
2. Ler código e quantidade
3. Se código for A
   - 3.1 total = quantidade * 10;
   Senão Se código for B
      - 3.2 total = quantidade * 20;
   Senão Se código for C
      - 3.3 total = quantidade * 30;
6. Escrever total
7. Se quantidade maior que 10
   1. Escrever "mais de 10 livros vendidos"
8. Fim.
#+latex: }

* Código em C

Veja código em [[./a05-exemplo-livros.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-exemplo-livros.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include <stdio.h>
int main(){
  char codigo;
  int nro_livros;
  float apagar;

  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d",&codigo, &nro_livros);

  if (codigo=='a' || codigo == 'A')
    apagar = nro_livros * 10;
  else if (codigo=='b' || codigo == 'B')
    apagar = nro_livros * 20;
  else if (codigo=='c' || codigo == 'C')
    apagar = nro_livros * 30;
  else
    printf("Codigo invalido!\n");

  printf("O valor a ser pago eh R$ %4.2f\n", apagar );
  if (nro_livros > 10)
    printf("Foram vendidas mais de 10 unidades!\n");
  return 0;
}
#+END_SRC

E se o código for inválido com mais de 10 unidades?

* Código em C (melhor)

Veja código em [[./a05-exemplo-livros-melhor.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-exemplo-livros-melhor.c
/* processa uma venda e avisa caso se mais de 10
unidades vendidas foram vendidas */
#include <stdio.h>
int main(){
  char codigo;
  int nro_livros;
  float apagar;

  printf("digite o codigo do produto e número de unidades:\n");
  scanf(" %c %d",&codigo, &nro_livros);

  if (codigo=='a' || codigo == 'A')
    apagar = nro_livros * 10;
  else if (codigo=='b' || codigo == 'B')
    apagar = nro_livros * 20;
  else if (codigo=='c' || codigo == 'C')
    apagar = nro_livros * 30;
  else {
    printf("Codigo invalido!\n");
    apagar = 0; // confirma ausência de pagamento!
  }

  if (apagar > 0){ // comandos ABAIXO executados apenas se ocorreu venda!
    printf("O valor a ser pago eh R$ %4.2f\n", apagar );
    if (nro_livros > 10)
      printf("Foram vendidas mais de 10 unidades!\n");
  }
  return 0;
}
#+END_SRC
* Uso da biblioteca =ctype.h= (funções =toupper=, =tolower=)

Múltiplos testes relacionais entre maiúscula e minúscula

#+BEGIN_SRC C
  if (codigo=='a' || codigo == 'A')
    apagar = nro_livros * 10;
  else if (codigo=='b' || codigo == 'B')
    apagar = nro_livros * 20;
  else if (codigo=='c' || codigo == 'C')
    apagar = nro_livros * 30;
#+END_SRC

#+latex: \pause

Usar =toupper= (ou =tolower=)

#+BEGIN_SRC C
if (toupper(codigo) == 'A')
    apagar = nro_livros * 10;
  else if (toupper(codigo) == 'B')
    apagar = nro_livros * 20;
  else if (toupper(codigo) == 'C')
    apagar = nro_livros * 30;
#+END_SRC

#+latex: \pause

O que fazem exatamente estas funções?
- Lembrar da [[./img/asciifull.jpg][tabela ASCII]]

* Entender o funcionamento de =toupper=

Veja em [[./a05-toupper.c]]

#+BEGIN_SRC C :tangle e/a05-toupper.c
#include <stdio.h>
#include <ctype.h>
int main()
{
  char letra_peq = 'a';
  char letra_gra = 'A';

  printf("pequena %c é %d\n"
	 "grande %c é %d\n",
	 letra_peq, letra_peq,
	 letra_gra, letra_gra);

  int dif = letra_peq - letra_gra;
  printf("dif = %d\n", dif);
  printf("%c %c\n", letra_peq - dif, letra_gra + dif);	 
  return 0;
}
#+END_SRC

#+latex: \pause

Conclusão
- O que faz =toupper=?
- O que faz =tolower=?

* Relembrando o problema dos quadrantes

Veja em [[./exemplo-coordenadas.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/exemplo-coordenadas.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);
  if (x == 0 && y == 0)
    printf("Ponto na origem");
  if (x > 0 && y > 0)
    printf("Ponto no quadrante 1.\n");
  if (x < 0 && y > 0)
    printf("Ponto no quadrante 2.\n");
  if (x < 0 && y < 0)
    printf("Ponto no quadrante 3.\n");
  if (x > 0 && y < 0)
    printf("Ponto no quadrante 4.\n");
  if (x != 0 && y == 0)
    printf("Ponto no eixo dos x.\n");
  if (x == 0 && y != 0)
    printf("Ponto no eixo dos y.\n");
  return 0;
}
#+END_SRC

* Empregando =if-else= (solução #1)

Veja em [[./a05-coordenadas-else.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-coordenadas-else.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);
  if (x == 0 && y == 0)
    printf("Ponto na origem");
  else if (x > 0 && y > 0)
    printf("Ponto no quadrante 1.\n");
  else if (x < 0 && y > 0)
    printf("Ponto no quadrante 2.\n");
  else if (x < 0 && y < 0)
    printf("Ponto no quadrante 3.\n");
  else if (x > 0 && y < 0)
    printf("Ponto no quadrante 4.\n");
  else if (x != 0 && y == 0)
    printf("Ponto no eixo dos x.\n");
  else if (x == 0 && y != 0)
    printf("Ponto no eixo dos y.\n");
  return 0;
}
#+END_SRC

#+latex: \pause

_Problema_: Vários testes desnecessários... vejamos uma alternativa!

* Empregando =if-else= (solução #2)

Veja em [[./a05-coordenadas-else-v2.c]]

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a05-coordenadas-else-v2.c
/* Obtem coordenadas e informa localização */
#include <stdio.h>
int main() {
  float x, y; //Entrada
  printf("Coordenadas: x = ");
  scanf("%f", &x);
  printf("e y = ");
  scanf("%f", &y);

  // identifica origem e eixos
  if (x == 0) // x = 0: possibilidade de origem ou eixo y
    if (y == 0) // y também = 0: localizou origem
      printf("Ponto na origem.\n");
    else // só pode ser eixo y
      printf("Ponto no eixo dos y.\n");
  else // x certamente é diferente de zero: não testa mais!
    if ( y == 0 ) // localizou eixo x
      printf("Ponto no eixo dos x.\n");
    else // só sobraram os quadrantes!!!
      if ( x > 0 ) // quadrantes 1 ou 4, dependendo de y
	if ( y > 0 ) // quadrante 1
	  printf("Ponto no quadrante 1.\n");
	else // quadrante 4, sem precisar mais testes
	  printf("Ponto no quadrante 4.\n");
      else // x é < 0: sobraram quadrantes 2 e 3, dependendo de y
	if ( y > 0 )
	  printf("Ponto no quadrante 2.\n");
	else // sobrou x < 0 e y < 0: não precisa testar
	  printf("Ponto no quadrante 3.\n");
  return 0;
}
#+END_SRC

* Exercício para casa #1

#+latex: \cortesia{../../../Algoritmos/Mara/Teoricas/Aula05-If_Aninhado_slide_37.pdf}{Prof. Mara Abel}

* #1: Planejamento

#+latex: \cortesia{../../../Algoritmos/Mara/Teoricas/Aula05-If_Aninhado_slide_38.pdf}{Prof. Mara Abel}

* Exercício para casa #2

#+latex: \cortesia{../../../Algoritmos/Mara/Teoricas/Aula05-If_Aninhado_slide_41.pdf}{Prof. Mara Abel}

* Exercício para casa #3

Suponha que a variável =resultado= se inicie com o valor =20=.

#+latex: \cortesia{../../../Algoritmos/Mara/Teoricas/Aula05-If_Aninhado_slide_44.pdf}{Prof. Mara Abel}
