# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{systeme}

#+latex: \newcommand{\mytitle}{Recursividade}
#+latex: \mytitleslide

* Sumário

- Recursividade com funções: o que é?
  - Condição de parada!
- Funcionamento
- Exemplos de definições recursivas
  - Fatorial
  - Potência positiva
  - Fibonacci
- Vantagens e desvantagens

#+latex: \vfill

Linguagens imperativas /vs/ Linguagens Funcionais
- Diferenças e uso da recursão como recurso de repetição

#+latex: \vfill

Exercício #1: palíndroma recursiva

* Recursividade: o que é?

https://pt.wikipedia.org/wiki/Recursividade

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula28/aula28_slide_01.pdf}{Prof. Marcelo Walter}

* Ideia geral

Ideia geral parcial
#+attr_latex: :options fontsize=\large
#+BEGIN_SRC C
int f() {
  f();
}
#+END_SRC

#+latex: \pause

Qual o problema dessa implementação?

#+latex: \vfill\pause

Ideia geral completa
#+attr_latex: :options fontsize=\large
#+BEGIN_SRC C
int f(int p) {
  if (/*condição de parada*/) {
    // termina a recursão
  }else{
    f(p-1); //recursão com parâmetro reduzido
  }
}
#+END_SRC

* Ideia geral com um exemplo

#+attr_latex: :options fontsize=\large
#+BEGIN_SRC C :tangle e/a40-f.c
#include <stdio.h>
void f(int p) {
  printf("%d\n", p);
  if (p > 0) {
    f(p-1);
  }
}

int main() {
  f(10);
  return 0;
}
#+END_SRC

* Estratégia comum do emprego da recursividade
#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula28/aula28_slide_03.pdf}{Prof. Marcelo Walter}
* Funcionamento da recursão: pilha implícita

Como a recursão funciona?
- Através de uma *pilha implícita*
- Cada elemento da pilha é uma ``chamada de função''
  - Contém _uma versão das variáveis locais_

#+latex: \pause

Vejamos com o exemplo anterior, repetido abaixo:
#+attr_latex: :options fontsize=\large
#+BEGIN_SRC C
#include <stdio.h>
void f(int p) {
  if (p > 0) {
    f(p-1);
  }
}
int main() {
  f(5);
  return 0;
}
#+END_SRC


* Exemplos de definições recursivas: _fatorial_

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula28/aula28_slide_07.pdf}{Prof. Marcelo Walter}

* Estratégia: _fatorial_ recursivo

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula28/aula28_slide_09.pdf}{Prof. Marcelo Walter}

* Código: _fatorial_

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a40-fat.c
#include <stdio.h>
int fatorial (int n) {
  int fat;
  if (n == 0)
    fat = 1; // encerra a recursão e inicia o retorno
  else
    fat = n * fatorial(n-1); // chamada recursiva
  return fat; // retorna fatorial
}
int main() {
  printf("%d\n", fatorial(4));
  return 0;
}
#+END_SRC

#+RESULTS:
: 24

* Exemplo de definições recursivas: _potência positiva_

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula28/aula28_slide_13.pdf}{Prof. Marcelo Walter}

* Estratégia: _potência positiva_
Lembrete
#+BEGIN_EXPORT latex
  \[
  a^b = \begin{cases}
  a & \text{se } b = 1; \\
  a\times(a^{b-1}) & \text{se } b > 1;
   \end{cases}
  \]
#+END_EXPORT

1. Qual o critério de parada?
2. Qual o critério para efetuar recursão?
   1. O que muda na recursão?

#+latex: \pause\vfill

Protótipo da função
#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C
int pot(int a, int b);
#+END_SRC

Como fica a implementação?

* Código: _potência positiva_

Lembrete
#+BEGIN_EXPORT latex
  \[
  a^b = \begin{cases}
  a & \text{se } b = 1; \\
  a\times(a^{b-1}) & \text{se } b > 1;
   \end{cases}
  \]
#+END_EXPORT

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a40-pot.c
#include <stdio.h>
int pot (int a, int b){
  if (b == 1)
    return a;
  else
    return a*pot(a, b-1);
}

int main() {
  printf("%d\n", pot(2, 3));
  return 0;
}
#+END_SRC

* Exercício de definições recursivas: _soma_

Fazer um programa contendo uma função que calcula a soma dos n
elementos inteiros de um vetor, de forma recursiva.

#+latex: \vfill

Qual a ideia?

#+latex: \vfill\pause

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a40-soma.c
#include <stdio.h>
int soma( ... ) {

}

int main() {
  int v[] = {3, 6, 20, 30, 5};
  printf("%d\n", ...
  return 0;
}
#+END_SRC

* Exemplos de definições recursivas: _fibonacci_

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula28/aula28_slide_18.pdf}{Prof. Marcelo Walter}

* Estratégia: _fibonacci_

| Posição | 0 | 1 | 2 | 3 | 4 | 5 |  6 |
|---------+---+---+---+---+---+---+----|
| Valor   | 1 | 1 | 2 | 3 | 5 | 8 | 13 |

Definição recursiva
#+BEGIN_EXPORT latex
  \[
  fib(n) = \begin{cases}
  1 & \text{se } n = 0; \\
  1 & \text{se } n = 1; \\
  fib(n-1) + fib(n-2) & \text{se } n > 1;
   \end{cases}
  \]
#+END_EXPORT

Qual o critério de parada?

Qual o critério de recursão?

* Código: _fibonacci_

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a40-fib.c
#include <stdio.h>
int fib (int n) {
  if (n == 0)
    return 1;
  else if (n == 1)
    return 1;
  else
    return fib(n-1)+fib(n-2); //recursão "dupla"
}

int main() {
  printf("%d\n", fib(6));
  return 0;
}
#+END_SRC

* Vantagens /versus/ Desvantagens

Vantagens
- Código mais compacto
- Conveniente para estruturas recursivas
- Código mais fácil legível
- Implementação imediata de funções matemáticas recursivas

#+latex: \pause

Desvantagens
- Maior ocupação de memória
- Maior tempo de processamento
* Reflexão: linguagens imperativas /versus/ funcionais

Linguagens imperativas
- Repetição é obtida por laços (for, while, do-while)
- Comandos são ordens de execução!

Linguagens funcionais
- Repetição é obtida por recursão
- Laços inexistem
* Alguns outros exemplos com recursividade

- Contagens
  - Número de dígitos de um número inteiro
  - Quantidade de caracteres de uma /string/
- Busca binária recursiva em arranjo ordenado

* Exercícios #1

Implemente com funções recursivas
1. Contagem: número de dígitos de um número inteiro
2. Contagem: quantidade de caracteres de uma /string/
3. Busca binária recursiva em arranjo ordenado
