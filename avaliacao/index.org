# -*- coding: utf-8 -*-"
#+STARTUP: overview indent

#+TITLE: Avaliação

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="http://orgmode.org">Org</a> mode 9.0.1)
#+LATEX_HEADER:
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export
#+TAGS: noexport(n) deprecated(d)

* Geral

Aguarde.

* AP

Aguarde.

* TF

Aguarde.

* P2
** Peso
| E    | Peso |
|------+------|
| E1   |  2.0 |
| E2   |  2.0 |
| E3.1 |  1.0 |
| E3.2 |  1.0 |
| E3.3 |  1.0 |
| E4   |  3.0 |
** Gabarito
*** E1
#+BEGIN_EXAMPLE
n = 4, vet[1] = -1, z = 24.00
n = 4, vet[2] = 7, z = -120.00
#+END_EXAMPLE
*** E2
Uma solução possível
#+begin_src C :results output :session :exports both
int fun (char *s, char c) {
  if (*s == '\0') {
    // Este é o critério de parada
    return 0;
  }else if (*s == c) {
    return 1 + fun(s+1, c);
  }else{
    return 0 + fun(s+1, c);
  }
}
int main() {
  char str[] = "A expansão acelerada do universo.";
  char c = 'e';
  int resposta = fun(str, c);
  printf("%d\n", resposta);
  return 0;
}
#+end_src

#+RESULTS:
: 4
*** E3
Uma solução possível
#+begin_src C :results output :session :exports both
typedef struct{
  float r;  // parte real
  float i;  // parte imaginária
}complex_t;

void soma1(complex_t *c1, complex_t c2) {
  c1->r = c1->r + c2.r;
  c1->i = c1->i + c2.i;
}

complex_t soma2(complex_t c1, complex_t c2) {
  complex_t ret;
  ret.r = c1.r + c2.r;
  ret.i = c1.i + c2.i;
  return ret;
}

complex_t *soma3(complex_t c1, complex_t c2, complex_t *res) {
  res->r = c1.r + c2.r;
  res->i = c1.i + c2.i;
  return res;
}

void imprime(complex_t c) {
  printf("[%.2f,%.2f]\n", c.r, c.i);
}

int main() {
  complex_t co1 = {2.3, 3.4};
  complex_t co2 = {4.3, 5.4};
  complex_t co3;
  complex_t *co4;
  imprime(co1);
  imprime(co2);
  soma1(&co1, co2);
  imprime(co1);
  co3 = soma2(co1, co2);
  imprime(co3);
  co4 = soma3(co3, co1, &co3);
  imprime(*co4);
  return 0;
}
#+end_src

#+RESULTS:
: [2.30,3.40]
: [4.30,5.40]
: [6.60,8.80]
: [10.90,14.20]
: [17.50,23.00]

*** E4
**** Uma solução possível
#+begin_src C :results output :session :exports both
#include <stdio.h>
typedef struct{
  int codigo;      // código do atleta
  char nome[44];   // nome do atleta
  int idade;       // idade do atleta
  char esporte[4]; // código do esporte
  float pad;       // espaço não utilizado
}atleta_t;

int main() {
  FILE *fp = fopen("atletas.bin", "r+");
  atleta_t atleta;
  int flag;
  flag = fread(&atleta, sizeof(atleta_t), 1, fp);
  while (flag == 1) {
    if (strcmp(atleta.esporte, "ESP") == 0) {
      atleta.idade += 2;
      fseek(fp, -sizeof(atleta_t), SEEK_CUR);
      fwrite(&atleta, sizeof(atleta_t), 1, fp);
    }
    flag = fread(&atleta, sizeof(atleta_t), 1, fp);
  }
  fclose(fp);
  return 0;
}
#+end_src

#+RESULTS:

**** Programas auxiliares
Não era esperado que estes programas fossem implementados na prova.

Programa que cria um arquivo ~atletas.bin~.
#+begin_src C :results output :session :exports both
#include <stdio.h>
typedef struct{
  int codigo;      // código do atleta
  char nome[44];   // nome do atleta
  int idade;       // idade do atleta
  char esporte[4]; // código do esporte
  float pad;       // espaço não utilizado
}atleta_t;
#define TT 10
int main() {
    atleta_t atletas[TT] = {0};
    FILE *fp = fopen("atletas.bin", "w");
    for (int i = 0; i < TT; i++){
      atletas[i].idade = 2;
      strcpy(atletas[i].esporte, "ESP");
    }
    fwrite(&atletas, sizeof(atleta_t), TT, fp);
    fclose(fp);
}
#+end_src

Programa que imprime o campo ~idade~ de um arquivo ~atletas.bin~.
#+begin_src C :results output :session :exports both
#include <stdio.h>
typedef struct{
  int codigo;      // código do atleta
  char nome[44];   // nome do atleta
  int idade;       // idade do atleta
  char esporte[4]; // código do esporte
  float pad;       // espaço não utilizado
}atleta_t;
#define TT 10
int main() {
    atleta_t atletas[TT] = {0};
    FILE *fp = fopen("atletas.bin", "r");
    fread(&atletas, sizeof(atleta_t), TT, fp);
    fclose(fp);
    for (int i = 0; i < TT; i++){
      printf("%d\n", atletas[i].idade);
    }
}
#+end_src

** Detalhamento por questão (sobre 10)

Aguarde.

** Final

Aguarde.

* P1
** Peso

| E    | Peso |
|------+------|
| E1.1 |  0.5 |
| E1.2 |  0.5 |
| E1.3 |  0.5 |
| E2   |  2.5 |
| E3   |  3.0 |
| E4   |  3.0 |

** Detalhamento por questão (sobre 10)

| ID     | E1.1 | E1.2 | E1.3 | E2 |  E3 |  E4 |
|--------+------+------+------+----+-----+-----|
| ???845 |  9.5 |   10 |  9.5 |  0 |   0 | 9.5 |
| ???597 |  9.5 |    0 |    0 |  1 |   5 |   0 |
| ???114 |    8 |    0 |    9 |  1 |   0 |   0 |
| ???941 |    9 |   10 |  9.5 |  0 |   8 | 9.5 |
| ???035 |    8 |    0 |   10 |  2 | 9.5 | 8.5 |
| ???588 |   10 |    0 |   10 |  0 |   9 | 9.5 |
| ???091 |    0 |    0 |    8 |  0 |   2 |   0 |
| ???057 |    9 |    9 |    0 |  2 | 7.5 |   2 |
| ???934 |  9.5 |   10 |   10 |  7 |   0 |   3 |
| ???694 |    8 |    0 |    0 |  2 |   8 | 9.5 |
| ???677 |  9.5 |   10 |  9.5 |  8 |   8 |   9 |
| ???838 |    7 |    0 |  8.5 |  0 |   2 |   0 |
| ???788 |  9.5 |    0 |    0 |  6 | 9.5 | 9.5 |
| ???816 |   10 |    0 |    9 |  2 |   9 |   4 |
| ???616 |    9 |    0 |   10 |  2 | 8.5 |   3 |
| ???108 |    8 |    0 |    0 |  0 |   0 |   3 |
| ???074 |    9 |   10 |   10 |  3 | 9.5 |   5 |
| ???052 |  9.5 |    0 |   10 |  8 |   4 |   1 |
| ???524 |   10 |    0 |    0 |  0 | 7.5 |   3 |
| ???893 |   10 |   10 |   10 |  9 |   8 | 9.5 |
| ???130 |  9.5 |    0 |    8 |  5 |   1 |   2 |
| ???043 |   10 |   10 |   10 |  1 |   9 |   3 |
| ???292 |    9 |    0 |   10 |  2 |   9 |   9 |
| ???313 |  9.5 |   10 |   10 |  1 |   0 |   9 |
| ???224 |  9.5 |    0 |  9.5 |  3 |   9 | 9.5 |
| ???099 |  9.5 |    0 |    0 |  2 | 9.5 |   7 |
| ???924 |    8 |   10 |    0 |  7 |   3 |   2 |
| ???351 |    7 |    0 |   10 |  9 |   9 |   3 |
| ???073 |    9 |    0 |   10 |  2 |   2 | 9.5 |
| ???039 |    9 |    0 |    8 |  5 |   9 |   7 |
| ???198 |    9 |    0 |  9.5 |  1 |   2 |   4 |
| ???987 |  9.5 |    0 |   10 |  1 | 9.5 |   2 |
| ???781 |    8 |    0 |  9.5 |  1 |   0 |   0 |
| ???743 |    7 |    0 |    0 |  1 |   1 |   0 |
| ???001 |  9.5 |    0 |    7 |  3 |   3 |   0 |
| ???391 |    9 |   10 |    0 |  4 | 8.5 |   9 |
| ???718 |    8 |    0 |    8 |  2 |   0 |   1 |
| ???564 |    9 |    0 |    0 |  2 | 8.5 | 9.5 |
| ???365 |    8 |   10 |    9 |  2 | 9.5 |   8 |
| ???315 |   10 |   10 |    8 |  0 |   8 | 9.5 |
| ???037 |    7 |    0 |    0 |  2 |   9 |   2 |
| ???762 |    8 |    0 |  9.5 |  0 | 8.5 |   1 |
| ???570 |   10 |    0 |   10 |  5 | 9.5 |   2 |
| ???352 |    0 |   10 |    0 |  2 |   8 |   5 |
| ???635 |   10 |    0 |   10 |  4 |   4 |   1 |
| ???846 |   10 |    0 |    0 |  2 |  10 |   8 |

** Final

| ID     |   P1 |
|--------+------|
| ???893 |    9 |
| ???677 | 8.55 |
| ???788 | 7.67 |
| ???224 | 7.25 |
| ???391 |  7.2 |
| ???365 |  7.1 |
| ???039 |  6.9 |
| ???292 | 6.85 |
| ???035 |  6.8 |
| ???941 | 6.67 |
| ???315 | 6.65 |
| ???074 | 6.55 |
| ???588 | 6.55 |
| ???351 | 6.53 |
| ???846 |  6.4 |
| ???564 | 6.35 |
| ???694 | 6.15 |
| ???099 | 5.92 |
| ???570 |  5.7 |
| ???816 | 5.35 |
| ???043 | 5.35 |
| ???073 |  4.9 |
| ???352 |  4.9 |
| ???616 |  4.9 |
| ???987 | 4.67 |
| ???052 | 4.47 |
| ???313 | 4.42 |
| ???845 |  4.3 |
| ???057 | 4.25 |
| ???037 | 4.15 |
| ???924 | 4.15 |
| ???934 | 4.12 |
| ???762 | 3.72 |
| ???524 | 3.65 |
| ???635 |  3.5 |
| ???130 | 3.02 |
| ???198 | 2.98 |
| ???001 | 2.48 |
| ???597 | 2.23 |
| ???718 |  1.6 |
| ???838 | 1.38 |
| ???108 |  1.3 |
| ???781 | 1.12 |
| ???114 |  1.1 |
| ???091 |    1 |
| ???743 |  0.9 |

