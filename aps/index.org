#+TITLE: Resolução Aulas Práticas
#+startup: overview indent
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="http://orgmode.org">Org</a> mode 9.0.1)
#+LATEX_HEADER:
#+EXPORT_EXCLUDE_TAGS: noexport

* AP7
* AP6
** C
*** 1. Strings

#+BEGIN_SRC C :tangle ap6-c-1.c
#include <stdio.h>
#include <string.h>
#define TAMMAX 100
int main() {
  //entrada
  char str[TAMMAX];
  //variáveis auxiliares
  int i;
  int contador;

  printf("Digite a string: ");
  fgets(str, TAMMAX, stdin);
  //Remover o \n
  if (str[strlen(str)-1] == '\n') {
    str[strlen(str)-1] = '\0';
  }

  contador = 0;
  for(i = 0; i < strlen(str); i++){
    if (str[i] >= 0+'0' && str[i] <= 9+'0'){
      contador++;
    }
  }
  printf("Numero de algarismos na string: %d\n", contador);
  for(i = 0; i < strlen(str); i++){
    if (str[i] >= 0+'0' && str[i] <= 9+'0'){
      if (str[i] == '9') str[i] = '0';
      else str[i] += 1;
    }
  }
  printf("String modificada: %s\n", str);
  return 0;
}
#+END_SRC

*** 2. Matriz

#+BEGIN_SRC C :tangle ap6-c-2.c
#include <stdio.h>
#define TAMMAX 10
int main() {
  int matriz[TAMMAX][TAMMAX];
  int n;
  int i, j, aux;
  int simetrica = 1;
  do {
    printf("Entre a dimensao da matriz: ");
    scanf("%d", &n);
  }while(n > TAMMAX);

  for(i = 0; i < n; i++){
    printf("Entre os elementos da linha %d: ", i+1);
    for(j = 0; j < n; j++){
      scanf("%d", &matriz[i][j]);
    }
  }
  //impressao
  printf("Impressao da matriz\n");
  for(i = 0; i < n; i++){
    for(j = 0; j < n; j++){
      printf("%3d", matriz[i][j]);
    }
    printf("\n");
  }
  //simetria
  for(i = 0; i < n; i++){
    for(j = 0; j < n; j++){
      if (matriz[i][j] != matriz[j][i]) {
	      simetrica = 0;
      }
    }
  }
  if (simetrica == 1){
    printf("A matriz lida eh simetrica.\n");
  }else{
    printf("A matriz lida NÃO eh simetrica.\n");
  }
  //troca
  for(j = 0; j < n; j++){
    aux = matriz[0][j];
    matriz[0][j] = matriz[n-1][j];
    matriz[n-1][j] = aux;
  }
  //impressao da troca
  printf("Matriz com primeira linha trocada pela ultima:\n");
  for(i = 0; i < n; i++){
    for(j = 0; j < n; j++){
      printf("%3d", matriz[i][j]);
    }
    printf("\n");
  }
  return 0;
}
#+END_SRC

** D
*** 1. Strings

#+BEGIN_SRC C :tangle ap6-d-1.c
#include <stdio.h>
#include <string.h>
#define TAMMAX 100
int main() {
  //entrada
  char str[TAMMAX];
  //variáveis auxiliares
  int i;
  int contador;

  printf("Digite a string: ");
  fgets(str, TAMMAX, stdin);
  //Remover o \n
  if (str[strlen(str)-1] == '\n') {
    str[strlen(str)-1] = '\0';
  }

  contador = 0;
  for(i = 0; i < strlen(str); i++){
    //a letra é minuscula
    if (str[i] >= 'a' && str[i] <= 'z'){
      contador++;
    }
  }
  printf("Numero de letras em minusculo na string: %d\n", contador);
  for(i = 0; i < strlen(str); i++){
    if (str[i] >= 'a' && str[i] <= 'z'){
      if (str[i] == 'z') str[i] = 'a';
      else str[i] += 1;
    }
  }
  printf("String modificada: %s\n", str);
  return 0;
}
#+END_SRC

*** 2. Matriz

#+BEGIN_SRC C :tangle ap6-d-2.c
#include <stdio.h>
#include <math.h>
#define TAMMAX 10
int main() {
  float matriz[TAMMAX][TAMMAX];
  int n;
  int i, j;
  float soma;
  int dominante = 1;
  do {
    printf("Entre a dimensao da matriz: ");
    scanf("%d", &n);
  }while(n > TAMMAX);

  for(i = 0; i < n; i++){
    printf("Entre os elementos da linha %d: ", i+1);
    for(j = 0; j < n; j++){
      scanf("%f", &matriz[i][j]);
    }
  }
  //impressao
  printf("Impressao da matriz\n");
  for(i = 0; i < n; i++){
    for(j = 0; j < n; j++){
      printf("%6.2f", matriz[i][j]);
    }
    printf("\n");
  }
  //dominante
  for(i = 0; i < n; i++){
    soma = 0;
    for(j = 0; j < n; j++){
      soma += matriz[i][j];
    }
    if (fabs(matriz[i][n/2]) < soma){
      dominante = 0;
    }
  }
  if (dominante == 1){
    printf("A matriz lida eh diagonal dominante.\n");
  }else{
    printf("A matriz lida nao eh diagonal dominante.\n");
  }
  //conta elementos não negativos fora da diagonal principal
  int contador = 0;
  for(i = 0; i < n; i++){
    for(j = 0; j < n; j++){
      if (i != j){
	      if (matriz[i][j] >= 0) {
		contador++;
	      }
      }
    }
  }
  printf("A matriz possui %d elementos nao-negativos fora da diagonal principal.\n", contador);
  return 0;
}
#+END_SRC

* AP5
** C
*** 1. raiz cúbica de número real r

#+BEGIN_SRC C :tangle ap5-c-1.c
#include <limits.h>
#include <stdio.h>
#include <math.h>

int main () {
  // Entradas
  double x;
  double r;
  double tolerancia;
  int n;
  // Auxiliares
  double diff;
  double novox;
  int i;
  printf("Entre o numero do qual se quer extrair a raiz cubica: ");
  scanf("%lf", &r);
  printf("Entre a aproximacao inicial: ");
  scanf("%lf", &x);
  printf("Entre o numero maximo de iteracoes: ");
  scanf("%d", &n);
  printf("Entre a tolerancia: ");
  scanf("%lf", &tolerancia);

  i = 0;
  diff = INT_MAX;
  while (fabs(diff) > tolerancia && i < n){
    novox = x - ((pow(x, 3) - r) / (3 * pow(x, 2)));
    diff = novox - x;
    x = novox;
    i++;
  }
  printf("A raiz cubica aproximada eh %.15f, obtida com %d iteracoes.\n", x, i);
  printf("A raiz por math.h eh %.15f.\n", cbrt(r));
  return 0;
}
#+END_SRC
*** 2. vetores: maior, menor, media, espalhamento

#+BEGIN_SRC C :tangle ap5-c-2.c
#include <stdio.h>
#include <float.h>
#include <math.h>

#define TAMMAX 7

int main() {
  //Entradas
  float vetor[TAMMAX];
  int n;
  //Auxiliares
  int i;
  float maior;
  float menor;
  float soma;
  float media;
  int perto;
  float distancia;
  float espalhamento;
  do {
    printf("Entre o numero de elementos no arranjo (valor menor ou igual a %d): ", TAMMAX);
    scanf("%d", &n);
  }while(n > TAMMAX);
  printf("Entre os %d valores reais: ", n);
  for (i = 0; i < n; i++){
    scanf("%f", &vetor[i]);
  }
  //procurar pelo maior e menor
  menor = FLT_MAX;
  maior = -FLT_MAX;
  soma = 0;
  for (i = 0; i < n; i++){
    if (vetor[i] > maior) maior = vetor[i];
    if (vetor[i] < menor) menor = vetor[i];
    soma += vetor[i];
  }
  media = soma / n;
  //quantidade de valores perto da media
  perto = 0;
  for (i = 0; i < n; i++){
    distancia = fabs(vetor[i] - media);
    espalhamento = 0.5 * (maior - menor);
    if (distancia < espalhamento) perto++;
  }
  printf("Menor valor: %f\n", menor);
  printf("Maior valor: %f\n", maior);
  printf("Media dos valores: %f\n", media);
  printf("Quantidade de valores perto da media: %d\n", perto);
  return 0;
}
#+END_SRC
** D
*** 1. raiz quarta de número real r

#+BEGIN_SRC C :tangle ap5-d-1.c
#include <limits.h>
#include <stdio.h>
#include <math.h>

int main () {
  // Entradas
  double x;
  double r;
  double tolerancia;
  int n;
  // Auxiliares
  double diff;
  double novox;
  int i;
  printf("Entre o numero do qual se quer extrair a raiz quadrada: ");
  scanf("%lf", &r);
  printf("Entre a aproximacao inicial: ");
  scanf("%lf", &x);
  printf("Entre o numero maximo de iteracoes: ");
  scanf("%d", &n);
  printf("Entre a tolerancia: ");
  scanf("%lf", &tolerancia);

  i = 0;
  diff = INT_MAX;
  while (fabs(diff) > tolerancia && i < n){
    novox = x - ((pow(x, 4) - r) / (4 * pow(x, 3)));
    diff = novox - x;
    x = novox;
    i++;
  }
  printf("A raiz quarta aproximada eh %.15f, obtida com %d iteracoes.\n", x, i);
  printf("A raiz por math.h eh %.15f.\n", pow(r, 0.25));
  return 0;
}
#+END_SRC
*** 2. copiando vetores com um deslocamento para a direita

#+BEGIN_SRC C :tangle ap5-d-2.c
#include <stdio.h>
#include <math.h>

#define TAMMAX 15

int main() {
  //Entradas
  int vetor1[TAMMAX];
  int vetor2[TAMMAX];
  int n;
  int m;
  //Auxiliares
  int i, j;
  int maior_diff;
  do {
    printf("Entre o numero de elementos no arranjo (valor menor ou igual a %d): ", TAMMAX);
    scanf("%d", &n);
  }while(n > TAMMAX);
  printf("Entre os %d valores inteiros: ", n);
  for (i = 0; i < n; i++){
    scanf("%d", &vetor1[i]);
  }
  do {
    printf("Entre um valor M menor do que %d: ", n);
    scanf("%d", &m);
  } while (m > n);

  for(j = m, i = 0; j < n; j++, i++){
    vetor2[j] = vetor1[i];
  }
  for(j = 0; j < m; j++, i++){
    vetor2[j] = vetor1[i];
  }

  printf("O arranjo modificado eh ");
  for(i = 0; i < n; i++){
    printf("%d ", vetor2[i]);
  }
  printf("\n");
  maior_diff = 0;
  for (i = 0; i < n; i++){
    if (fabs(vetor2[i] - vetor1[i]) > maior_diff) {
      maior_diff = fabs(vetor2[i] - vetor1[i]);
    }
  }
  printf("A maior diferenca (em modulo) entre os vetores eh %d.\n", maior_diff);
  return 0;
}
#+END_SRC
* AP12
** Turma C e D

Código base.

#+BEGIN_SRC C :tangle ap12-le.c :main no
typedef struct
{
  char nome[50];
  int idade;
  float salario;
} TIPO_FUNCIONARIO;
#+END_SRC

*** 1. ~le_funcionarios (TIPO_FUNCIONARIO entradas[])~

#+BEGIN_SRC C :main no :tangle ap12-le.c
#include <stdio.h>
#include <string.h>
void limpa_buffer() {
  char c;
  while ((c = getchar()) != '\n' && c != EOF);
}

int le_funcionarios (TIPO_FUNCIONARIO entradas[]) {
  int n = 0;
  int continuar_lendo = 1;
  while (continuar_lendo) {
    printf("Entre o nome do funcionario: ");
    fgets(entradas[n].nome, 50, stdin);
    entradas[n].nome[strlen(entradas[n].nome)-1] = '\0';
    if (strlen(entradas[n].nome) == 0) {
      continuar_lendo = 0;
    }else{
      printf("Entre a idade do funcionario: ");
      scanf("%d", &entradas[n].idade);
      printf("Entre o salario do funcionario: ");
      scanf("%f", &entradas[n].salario);
      limpa_buffer();
      n++;
    }
  }
  return n;
}
#+END_SRC

*** 2. ~void imprime_funcionarios(TIPO_FUNCIONARIO entradas[], int num)~

#+BEGIN_SRC C :main no :tangle ap12-le.c
void imprime_funcionarios(TIPO_FUNCIONARIO entradas[], int num) {
  int i;
  for (i = 0; i < num; i++){
    printf("%s, Idade: %d, Salario: %.2f\n",
	   entradas[i].nome,
	   entradas[i].idade,
	   entradas[i].salario);
  }
}
#+END_SRC

*** 3. ~void escreve_arquivo(FILE *arq, TIPO_FUNCIONARIO entradas[], int num)~

#+BEGIN_SRC C :main no :tangle ap12-le.c
void escreve_arquivo(FILE *arq, TIPO_FUNCIONARIO entradas[], int num) {
  fwrite(entradas, sizeof(TIPO_FUNCIONARIO), num, arq);
}
#+END_SRC

*** 4. ~int le_arquivo(FILE *arq, TIPO_FUNCIONARIO entradas[])~

#+BEGIN_SRC C :main no :tangle ap12-le.c
int le_arquivo(FILE *arq, TIPO_FUNCIONARIO entradas[]) {
  int elementos_lidos = 0;
  int n = 0;
  int continuar_lendo = 1;
  while(continuar_lendo) {
    elementos_lidos = fread(&entradas[n], sizeof(TIPO_FUNCIONARIO), 1, arq);
    if (elementos_lidos != 1){
      continuar_lendo = 0;
    }else{
      n++;
    }
  }
  return n;
}
#+END_SRC

*** 5. Função principal

#+BEGIN_SRC C :main no :tangle ap12-le.c
#define MAXFUNC 10
#define MAXSTRING 100
int main (){
  FILE *arquivo = NULL;
  char nome_arquivo[MAXSTRING];
  TIPO_FUNCIONARIO funcionarios[MAXFUNC];
  bzero(funcionarios, sizeof(TIPO_FUNCIONARIO)*MAXFUNC);
  TIPO_FUNCIONARIO funcionarios_2[MAXFUNC];
  bzero(funcionarios_2, sizeof(TIPO_FUNCIONARIO)*MAXFUNC);
  int n_funcionarios = 0;
  // a)
  n_funcionarios = le_funcionarios(funcionarios);
  // b)
  while(arquivo == NULL){
    printf("Entre o nome do arquivo a ser salvo (com extensao): ");
    fgets(nome_arquivo, MAXSTRING, stdin);
    nome_arquivo[strlen(nome_arquivo)-1] = '\0';
    arquivo = fopen(nome_arquivo, "w");
  }
  escreve_arquivo(arquivo, funcionarios, n_funcionarios);
  fclose(arquivo);
  arquivo = NULL;
  // c)
  while(arquivo == NULL){
    printf("Entre o nome do arquivo a ser lido (com extensao): ");
    fgets(nome_arquivo, MAXSTRING, stdin);
    nome_arquivo[strlen(nome_arquivo)-1] = '\0';
    arquivo = fopen(nome_arquivo, "r");
  }
  n_funcionarios = le_arquivo(arquivo, funcionarios_2);
  fclose(arquivo);
  arquivo = NULL;
  // d)
  printf("Impressao dos dados lidos do arquivo:\n");
  imprime_funcionarios(funcionarios_2, n_funcionarios);
  return 0;
}
#+END_SRC
