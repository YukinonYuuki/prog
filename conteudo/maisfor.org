# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: /Mais/ =for= para nós
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |

* Sumário

Laços iterativos (/loops/)
- Erros frequentes no comando =for=
- Comandos =for= aninhados
  - Mais fatorial e fibonacci
- Tamanho do tipo =int= em fatorial e fibonacci
- Mais estudos de caso
  1. Tabuada
  2. Estimar a raiz quadrado de 2 por Newton-Raphson
  3. Maior e menor
  4. Estimar a exponencial de um número
- Miscelânea
- Exercícios

* Erros frequentes (ponto e vírgula acidental)

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula08/aula08_slide_12.pdf}{Prof. Marcelo Walter}

* Erros frequentes (esquecimento de bloco)

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula08/aula08_slide_13.pdf}{Prof. Marcelo Walter}

* Erros frequentes (laços infinitos)

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula08/aula08_slide_14.pdf}{Prof. Marcelo Walter}
* Estudo de caso do fatorial (aninhar laços =for=)

Ao invés de calcular o fatorial de um número, calcular

o fatorial de todos os números até um número informado.

#+latex: \pause\vfill

Entrada: um número inteiro positivo

Saída: fatorial de todos os números até um número informado na entrada

* Tomando por base o exemplo anterior

Quais alterações são necessárias?
- Repetir o cálculo para todos os números até o informado

#+BEGIN_SRC C :tangle e/a08-fatorial-comeco.c
#include <stdio.h>
int main () {
  int num, fat, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo.\n");
  else {

    //o que fazer aqui para resolver nosso objetivo?

    fat = 1; // se for zero, está pronto
    for (i= num; i >= 1; i--)
      fat = fat * i;
    printf ("Fatorial de %d eh %d.\n", num, fat);
  }
  return 0;
}
#+END_SRC

* Uma primeira possível solução

#+BEGIN_SRC C :tangle e/a08-fatorial-solucao-1.c
#include <stdio.h>
int main () {
  int num, fat, i, j;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo.\n");
  else {
    for (j = 0; j <= num; j++) {
      fat = 1; // se for zero, está pronto
      for (i = j; i >= 1; i--)
	fat = fat * i;
      printf ("Fatorial de %d eh %d.\n", j, fat);
    }
  }
  return 0;
}
#+END_SRC

#+latex: \pause

Para a entrada 10, o programa calcula 10\times9\times8\times7\times6\times5\times4\times3\times2\times1.

Mas esta é uma boa solução?
- Um =for= aninhado em outro, repetição de cálculo

* Uma segunda possível solução

Para a entrada 10, o programa calcula 10\times9\times8\times7\times6\times5\times4\times3\times2\times1.
- Em cada iteração, imprimir na tela

#+BEGIN_SRC C :tangle e/a08-fatorial-solucao-2.c
#include <stdio.h>
int main () {
  int num, fat, i, j;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo.\n");
  else {
    for (i = 0; i <= num; i++){
      if (i == 0){
	fat = 1;
      }else{
	fat = fat * i;
      }
      printf ("Fatorial de %d eh %d.\n", i, fat);
    }
  }
  return 0;
}
#+END_SRC

* Estudo de caso do fibonnaci (aninhar laços =for=)

Ao invés de calcular o valor fibonacci de uma posição, calcular

tal valor para todas as posições até uma posição informada.

#+latex: \pause\vfill

Entrada: um número inteiro positivo

Saída: valor de fibonacci de todas as posições até aquela informada

* Tomando por base o exemplo anterior

Quais alterações são necessárias?
- Repetir o cálculo para todos as posições até a informada

#+BEGIN_SRC C :tangle e/a08-fibonacci-comeco.c
#include<stdio.h>
int main(){
  int pos, fib, t_1, t_2, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &pos);
  if (pos < 0) printf("Tsk tsk, a posição informada é negativa\n");
  else {

    //o que fazer aqui para resolver nosso objetivo?

    if (pos == 0)
      fib = 0;
    else if (pos == 1)
      fib = 1;
    else{
      t_2 = 0;
      t_1 = 1;
      for (i = 2; i <= pos; i++){
	   fib = t_2 + t_1;
	   t_2 = t_1;
	   t_1 = fib;
      }
    }
    printf ("Fibonacci da posição %d eh %d.\n", pos, fib);
  }
  return 0;
}
#+END_SRC
* Uma possível solução

#+BEGIN_SRC C :tangle e/a08-fibonacci-solucao.c
#include<stdio.h>
int main(){
  int pos, fib, t_1, t_2, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &pos);
  if (pos < 0) printf("Tsk tsk, a posição informada é negativa\n");
  else {
    t_2 = 0;
    t_1 = 1;
    for (i = 0; i <= pos; i++){
      if (i == 0){
	fib = 0;
      }else if (i == 1){
	fib = 1;
      }else{
	fib = t_2 + t_1;
	t_2 = t_1;
	t_1 = fib;
      }
      printf ("Fibonacci da posição %d eh %d.\n", i, fib);
    }   
  }
  return 0;
}
#+END_SRC

* Tamanho do tipo =int= em fatorial e fibonacci

O que acontece se testarmos Fatorial de 35?

[[./a08-fatorial-solucao-2.c]]

#+latex: \vfill

O que acontece se testarmos Fibonacci de 50?

[[./a08-fibonacci-solucao.c]]

#+latex: \pause\vfill

** Exemplo de Fibonnaci
 E se usarmos o tipo =long long=, ou =unsigned long long=.
 - pos(93) funciona?
 - pos(94) funciona?

* Comandos =for= aninhados 

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula08/aula08_slide_15.pdf}{Prof. Marcelo Walter}

* Vejamos o exemplo

#+BEGIN_SRC C :tangle e/a08-ka-ele.c
#include <stdio.h>
int main(){
  int ka, ele;
  for (ka = 1; ka <= 2; ka++)
    for (ele=2; ele<=6;ele= ele + 2)
      printf("ka -> %d -- ele -> %d\n", ka, ele);
}
#+END_SRC

#+begin_src shell :results output
gcc a08-ka-ele.c; ./a.out
#+end_src

#+RESULTS:
: ka -> 1 -- ele -> 2
: ka -> 1 -- ele -> 4
: ka -> 1 -- ele -> 6
: ka -> 2 -- ele -> 2
: ka -> 2 -- ele -> 4
: ka -> 2 -- ele -> 6

* Funcionamento de =for= aninhado

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula08/aula08_slide_16.pdf}{Prof. Marcelo Walter}

* Estudo de caso #1 (Tabuada)

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula08/aula08_slide_17.pdf}{Prof. Marcelo Walter}

Façamos de 0 a 10.

* (#1: Tabuada) Uma solução possível

#+BEGIN_SRC C :tangle e/a08-tabuada.c
/* gera a tabuada dos números de 0 a 10:
Entrada: não há
Saida: impressão da tabuada na tela */
#include <stdio.h>
int main () {
  int multiplicando, multiplicador;
  for (multiplicador = 0; multiplicador <= 10; multiplicador++){
    printf("Tabuada de %d:\n", multiplicador);
    for (multiplicando = 0; multiplicando <= 10; multiplicando++) {
      printf("%2d x %2d = %2d\n",
	     multiplicando , multiplicador, multiplicando * multiplicador);
    }
    printf("\n");
  }
  return 0;
}
#+END_SRC

#+latex: \pause

Podemos inverter os dois laços =for=?

O que acontece se assim fizermos?

* Estudo de caso #2 (Newton-Raphson)

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula008_slide_08.pdf}{Prof. Edison Pignaton de Freitas}

* (#2 Newton-Raphson) Uma solução possível

#+BEGIN_SRC C :tangle e/a08-newton-raphson.c
/* Programa para calcular raiz quadrada de 2 usando Newton-Raphson
Entrada: numero de iteracoes (inteiro) e “chute” inicial
Saida: valor aproximado de raiz de 2*/
#include <stdio.h>
#include <math.h>
int main() {
  int niter; // Entrada: numero de iteracoes
  int i;     // Variável auxiliar para contar as iterações
  double xinic, x1, x2; // aproximacao inicial e valores usados na iteracao
  printf("Entre o numero de iteracoes:\n");
  scanf("%d", &niter);
  printf("Entre a aproximacao inicial de raiz de 2:\n");
  scanf("%lf", &xinic);

  x1 = xinic;
  for (i = 0; i < niter; i++) {
    x2 = x1 - (x1*x1-2)/(2*x1);
    printf("Em iteração %d, valor aproximado é %1.15f\n", i, x2);
    x1 = x2;
  }
  printf("sqrt(2)         : %1.15f\n"
         "Valor aproximado: %1.15f\n", sqrt(2), x2);
  return 0;
}
#+END_SRC

* Estudo de caso #3 (Maior-Menor)

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula008_slide_11.pdf}{Prof. Edison Pignaton de Freitas}

* (#3 Maior-Menor) Uma solução possível com 4 números

#+BEGIN_SRC C :tangle e/a08-maior-menor.c
#include <stdio.h>
#include <limits.h>
#define ELEM 4
int main (){
  int i, num, maior = INT_MIN, menor = INT_MAX;
    printf("No início: %d (menor), %d (maior)\n", menor, maior);
  for(i = 0; i < ELEM; i++){
    printf("Entre com o numero %d: ", i);
    scanf("%d", &num);
    if (num > maior) maior = num;
    if (num < menor) menor = num;
    printf("Iteração %d, até agora: %d (menor), %d (maior)\n", i, menor, maior);
  }
  printf("O menor numero eh %d, e o maior eh %d\n", menor, maior);
  return 0;
}
#+END_SRC

#+latex: \tiny\pause

#+begin_src shell :results output
gcc a08-maior-menor.c; echo "282 93912187 2 -12292" | ./a.out
#+end_src

#+RESULTS:
: No início: 2147483647 (menor), -2147483648 (maior)
: Entre com o numero 0: Iteração 0, até agora: 282 (menor), 282 (maior)
: Entre com o numero 1: Iteração 1, até agora: 282 (menor), 93912187 (maior)
: Entre com o numero 2: Iteração 2, até agora: 2 (menor), 93912187 (maior)
: Entre com o numero 3: Iteração 3, até agora: -12292 (menor), 93912187 (maior)
: O menor numero eh -12292, e o maior eh 93912187
* Estudo de caso #4 (Série de potência)

#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula008_slide_13-crop.pdf}{Prof. Edison Pignaton de Freitas}

* (#4 Série de potência) Uma solução possível

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a08-serie-potencia.c
/* Programa para calcular exp(x) de forma aproximada, via series de
potencias
Entradas: valor de x e numero de termos a serem usados na série
Saída: valor aproximado de exp(x) */
#include <stdio.h>
#include <math.h>
int main() {
  int n;            // Entrada: numero de termos
  double x;         // Entrada: valor de x
  double exp_x;     // Saída: exponencial de x
  double termo;     // variavel auxiliar
  int i, cont_fat;  // contadores
  long long fat;    // fatorial
  printf("Entre o valor x e o numero de termos da serie: \n");
  scanf("%lf%d", &x, &n);
  exp_x = 0;
  for (i = 0; i < n; i++) {
    {
      fat = 1;
      for (cont_fat = i; cont_fat >= 1; cont_fat--)
	fat = fat * cont_fat;
    }
    termo = pow(x, i) / fat; // calcula o termo
    exp_x = exp_x + termo; // atualiza valor do somatorio
    printf("Na iteração %d, valor %lf\n", i, exp_x);
  }
  printf("Valor calculado : %lf\n", exp_x);
  printf("Valor de exp(%2.f): %lf\n", x, exp(x));
  return 0;
}
#+END_SRC

* (#4 Série de potência) Compilação & Execução

#+latex: \tiny

#+begin_src shell :results output
gcc a08-serie-potencia.c -lm; echo "2 14" | ./a.out
#+end_src

#+RESULTS:
#+begin_example
Entre o valor x e o numero de termos da serie: 
Na iteração 0, valor 1.000000
Na iteração 1, valor 3.000000
Na iteração 2, valor 5.000000
Na iteração 3, valor 6.333333
Na iteração 4, valor 7.000000
Na iteração 5, valor 7.266667
Na iteração 6, valor 7.355556
Na iteração 7, valor 7.380952
Na iteração 8, valor 7.387302
Na iteração 9, valor 7.388713
Na iteração 10, valor 7.388995
Na iteração 11, valor 7.389046
Na iteração 12, valor 7.389055
Na iteração 13, valor 7.389056
Valor calculado : 7.389056
Valor de exp( 2): 7.389056
#+end_example

#+begin_src shell :results output
gcc a08-serie-potencia.c -lm; echo "3 6" | ./a.out
#+end_src

#+RESULTS:
: Entre o valor x e o numero de termos da serie: 
: Na iteração 0, valor 1.000000
: Na iteração 1, valor 4.000000
: Na iteração 2, valor 8.500000
: Na iteração 3, valor 13.000000
: Na iteração 4, valor 16.375000
: Na iteração 5, valor 18.400000
: Valor calculado : 18.400000
: Valor de exp( 3): 20.085537
* Inicializações ou incrementos / decrementos múltiplos
#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula008_slide_27.pdf}{Prof. Edison Pignaton de Freitas}
* Exemplo
#+latex: \cortesia{../../../Algoritmos/Edison/Teoricas/aula008_slide_28.pdf}{Prof. Edison Pignaton de Freitas}
* Exercício #1 (Newton-Raphson com erro)
#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula09/aula09_slide_14.pdf}{Prof. Marcelo Walter}
* Exercício #2 (Taxa de Crescimento)
#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula09/aula09_slide_21.pdf}{Prof. Marcelo Walter}
