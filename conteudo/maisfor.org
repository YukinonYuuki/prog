# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Mais =for= para nós}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |

* Sumário

Laços iterativos (/loops/)
- Erros frequentes no comando =for=
- Comandos =for= aninhados
- Tamanho do tipo =int= em fatorial e fibonacci
- Mais estudos de caso
  1. Tabuada
  2. Estimar a raiz quadrado de 2 por Newton-Raphson
  3. Maior e menor
  4. Estimar a exponencial de um número
- Miscelânea
- Exercícios

* Erros frequentes #1

#+begin_center
Qual o problema?
#+end_center

#+begin_src C
#include <stdio.h>
int main () {
  int i, soma = 0;
  for (i = 0; i < 100; i++);
    soma = soma + i;
  return 0;
}
#+end_src

#+latex: \pause

#+begin_center
Ponto e vírgula acidental
#+end_center

* Erros frequentes #2

#+begin_center
Qual o problema?
#+end_center

#+begin_src C
#include <stdio.h>
int main () {
  int i, soma = 0;
  for (i = 0; i < 100; i++)
    soma = soma + i;
    printf("O termo %d vale %d.\n", i, soma);
  return 0;
}
#+end_src

#+latex: \pause

#+begin_center
Esquecimento de bloco
#+end_center

* Erros frequentes #3

#+begin_center
Qual o problema?
#+end_center

Programa #1
#+begin_src C
#include <stdio.h>
int main () {
  int i;
  for (i = 5; i < 10; i--)
    printf("%d\n", i);
  return 0;
}
#+end_src

Programa #2
#+begin_src C
#include <stdio.h>
int main () {
  int i, j = 2;
  for (i = 1; i < j; i++, j++)
    printf("%d %d\n", i, j);
  return 0;
}
#+end_src

#+latex: \pause

#+begin_center
Laços infinitos
#+end_center

* Estudo de caso do fatorial (aninhar laços =for=)                   :noexport:

Ao invés de calcular o fatorial de um número, calcular

o fatorial de todos os números até um número informado.

#+latex: \pause\vfill

Entrada: um número inteiro positivo

Saída: fatorial de todos os números até um número informado na entrada

* Tomando por base o exemplo anterior                              :noexport:

Quais alterações são necessárias?
- Repetir o cálculo para todos os números até o informado

#+BEGIN_SRC C :tangle e/a08-fatorial-comeco.c
#include <stdio.h>
int main () {
  int num, fat, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo.\n");
  else {
    //o que fazer aqui para resolver nosso objetivo?
    fat = 1; // se for zero, está pronto
    for (i = num; i >= 1; i--)
      fat = fat * i;
    printf ("Fatorial de %d eh %d.\n", num, fat);
  }
  return 0;
}
#+END_SRC

* Uma primeira possível solução                                    :noexport:

#+BEGIN_SRC C :tangle e/a08-fatorial-solucao-1.c
#include <stdio.h>
int main () {
  int num, fat, i, j;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo.\n");
  else {
    for (j = 0; j <= num; j++) {
      fat = 1; // se for zero, está pronto
      for (i = j; i >= 1; i--)
	fat = fat * i;
      printf ("Fatorial de %d eh %d.\n", j, fat);
    }
  }
  return 0;
}
#+END_SRC

#+latex: \pause

Para a entrada 10, o programa calcula 10\times9\times8\times7\times6\times5\times4\times3\times2\times1.

Mas esta é uma boa solução?
- Um =for= aninhado em outro, repetição de cálculo

* Uma segunda possível solução                                     :noexport:

Para a entrada 10, o programa calcula 10\times9\times8\times7\times6\times5\times4\times3\times2\times1.
- Em cada iteração, imprimir na tela

#+BEGIN_SRC C :tangle e/a08-fatorial-solucao-2.c
#include <stdio.h>
int main () {
  int num, fat, i, j;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo.\n");
  else {
    for (i = 0; i <= num; i++){
      if (i == 0){
	fat = 1;
      }else{
	fat = fat * i;
      }
      printf ("Fatorial de %d eh %d.\n", i, fat);
    }
  }
  return 0;
}
#+END_SRC

* Estudo de caso do fibonnaci (aninhar laços =for=)                  :noexport:

Ao invés de calcular o valor fibonacci de uma posição, calcular

tal valor para todas as posições até uma posição informada.

#+latex: \pause\vfill

Entrada: um número inteiro positivo

Saída: valor de fibonacci de todas as posições até aquela informada

* Tomando por base o exemplo anterior                              :noexport:

Quais alterações são necessárias?
- Repetir o cálculo para todos as posições até a informada

#+BEGIN_SRC C :tangle e/a08-fibonacci-comeco.c
#include<stdio.h>
int main(){
  int pos, fib, t_1, t_2, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &pos);
  if (pos < 0) printf("Tsk tsk, a posição informada é negativa\n");
  else {
    //o que fazer aqui para resolver nosso objetivo?
    if (pos == 0)
      fib = 0;
    else if (pos == 1)
      fib = 1;
    else{
      t_2 = 0;
      t_1 = 1;
      for (i = 2; i <= pos; i++){
	   fib = t_2 + t_1;
	   t_2 = t_1;
	   t_1 = fib;
      }
    }
    printf ("Fibonacci da posição %d eh %d.\n", pos, fib);
  }
  return 0;
}
#+END_SRC
* Uma possível solução                                             :noexport:

#+BEGIN_SRC C :tangle e/a08-fibonacci-solucao.c
#include<stdio.h>
int main(){
  int pos, fib, t_1, t_2, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &pos);
  if (pos < 0) printf("Tsk tsk, a posição informada é negativa\n");
  else {
    t_2 = 0;
    t_1 = 1;
    for (i = 0; i <= pos; i++){
      if (i == 0){
	fib = 0;
      }else if (i == 1){
	fib = 1;
      }else{
	fib = t_2 + t_1;
	t_2 = t_1;
	t_1 = fib;
      }
      printf ("Fibonacci da posição %d eh %d.\n", i, fib);
    }   
  }
  return 0;
}
#+END_SRC

* Tamanho do tipo =int= em fatorial e fibonacci

O que acontece se testarmos Fatorial de 35?

[[./a08-fatorial-solucao-2.c]]

#+latex: \vfill

O que acontece se testarmos Fibonacci de 50?

[[./a08-fibonacci-solucao.c]]

#+latex: \pause\vfill

** Exemplo de Fibonnaci
 E se usarmos o tipo =long long=, ou =unsigned long long=.
 - pos(93) funciona?
 - pos(94) funciona?

* Comandos =for= aninhados 

#+begin_src C
for (/*lista de comandos*/; /*expressão lógica*/; /*lista de comandos*/) {
   // bloco de comandos
}
#+end_src
O ``bloco de comandos'' pode conter comandos =for=
- Todo o bloco é executado a cada iteração

#+latex: \pause

Vejamos o exemplo =a08-ka-ele.c=
#+BEGIN_SRC C :tangle e/a08-ka-ele.c
#include <stdio.h>
int main(){
  int ka, ele;
  for (ka = 1; ka <= 2; ka++)
    for (ele = 2; ele<=6; ele = ele + 2)
      printf("ka -> %d -- ele -> %d\n", ka, ele);
}
#+END_SRC

#+latex: {\scriptsize

#+begin_src shell :results output :exports both :dir e
gcc a08-ka-ele.c; ./a.out
#+end_src

#+RESULTS:
: ka -> 1 -- ele -> 2
: ka -> 1 -- ele -> 4
: ka -> 1 -- ele -> 6
: ka -> 2 -- ele -> 2
: ka -> 2 -- ele -> 4
: ka -> 2 -- ele -> 6

#+latex: }

* Estudo de caso #1 (Tabuada)

#+begin_center
Faça um programa que gere o resultado da tabuada de todos os números
de 0 a 10. O resultado deve aparecer como abaixo. Dica: use dois
comandos for aninhados, um para controlar os multiplicadores e outro
para controlar os multiplicandos.
#+end_center

#+begin_src text
Tabuada de 0:
1 x 0 = 0
2 x 0 = 0
...

Tabuada de 1:
1 x 1 = 1
2 x 1 = 2
...
10 x 1 = 10

Tabuada de 2:
1 x 2 = 2
2 x 2 = 4
...
#+end_src

* (#1: Tabuada) Uma solução possível

=a08-tabuada.c=
#+BEGIN_SRC C :tangle e/a08-tabuada.c
/* gera a tabuada dos números de 0 a 10:
Entrada: não há
Saida: impressão da tabuada na tela */
#include <stdio.h>
int main () {
  int multiplicando, multiplicador;
  for (multiplicador = 0; multiplicador <= 10; multiplicador++){
    printf("Tabuada de %d:\n", multiplicador);
    for (multiplicando = 0; multiplicando <= 10; multiplicando++) {
      printf("%2d x %2d = %2d\n",
	     multiplicando , multiplicador, multiplicando * multiplicador);
    }
    printf("\n");
  }
  return 0;
}
#+END_SRC

#+latex: \pause

Podemos inverter os dois laços =for=?

O que acontece se assim fizermos?

* Estudo de caso #2 (Newton-Raphson)

*Cálculo aproximado da raiz de 2*

A raiz de 2 pode ser aproximada através do algoritmo de Newton-
Raphson. Partindo de uma aproximação inicial x0 (um chute), podem ser
encontradas aproximações sucessivas através da equação de recorrência
abaixo:

#+latex: \vfill

#+begin_export latex
$x_n = x_{n-1} - \frac{x^{2}_{n-1} - 2}{2 . x_{n-1}}$

$x_0 = val$
#+end_export

sendo =val= um chute inicial fornecido pelo usuário.

#+latex: \vfill

Escreva um programa em C que tenha como entrada o número de iterações
(niter) e a aproximação inicial (x0), e forneça como saída a
aproximação para a raiz de 2 com esse número de iterações.

* (#2 Newton-Raphson) Uma solução possível

=a08-newton-raphson.c=
#+BEGIN_SRC C :tangle e/a08-newton-raphson.c
/* Programa para calcular raiz quadrada de 2 usando Newton-Raphson
Entrada: numero de iteracoes (inteiro) e “chute” inicial
Saida: valor aproximado de raiz de 2*/
#include <stdio.h>
#include <math.h>
int main() {
  int niter; // Entrada: numero de iteracoes
  int i;     // Variável auxiliar para contar as iterações
  double x0, x1, x2; // aproximacao inicial e valores usados na iteracao
  printf("Entre o numero de iteracoes:\n");
  scanf("%d", &niter);
  printf("Entre a aproximacao inicial de raiz de 2:\n");
  scanf("%lf", &x0);

  x1 = x0;
  for (i = 0; i < niter; i++) {
    x2 = x1 - (x1*x1-2)/(2*x1);
    printf("Na iteração %d, valor aproximado é %1.15f\n", i, x2);
    x1 = x2;
  }
  printf("sqrt(2)         : %1.15f\n"
         "Valor aproximado: %1.15f\n", sqrt(2), x2);
  return 0;
}
#+END_SRC

* Estudo de caso #3 (Maior-Menor)

#+begin_center
Faça um programa para ler uma sequencia de 5 inteiros

que apresente ao final o maior e o menor dos valores lidos.
#+end_center

Idéia de solução: inicializamos uma variável menor com o maior valor
possível e vice-versa. Na medida que vamos lendo os valores,
verificamos se o novo valor lido satisfaz ou não o critério de maior
ou menor e trocamos se for o caso.

* (#3 Maior-Menor) Uma solução possível com 4 números

=a08-maior-menor.c=
#+BEGIN_SRC C :tangle e/a08-maior-menor.c
#include <stdio.h>
#include <limits.h>
#define ELEM 4
int main (){
  int i, num, maior = INT_MIN, menor = INT_MAX;
    printf("No início: %d (menor), %d (maior)\n", menor, maior);
  for(i = 0; i < ELEM; i++){
    printf("Entre com o numero %d: ", i);
    scanf("%d", &num);
    if (num > maior) maior = num;
    if (num < menor) menor = num;
    printf("Iteração %d, até agora: %d (menor), %d (maior)\n", i, menor, maior);
  }
  printf("O menor numero eh %d, e o maior eh %d\n", menor, maior);
  return 0;
}
#+END_SRC

#+latex: \tiny\pause

#+begin_src shell :results output :exports both :dir e
gcc a08-maior-menor.c; echo "282 93912187 2 -12292" | ./a.out
#+end_src

#+RESULTS:
: No início: 2147483647 (menor), -2147483648 (maior)
: Entre com o numero 0: Iteração 0, até agora: 282 (menor), 282 (maior)
: Entre com o numero 1: Iteração 1, até agora: 282 (menor), 93912187 (maior)
: Entre com o numero 2: Iteração 2, até agora: 2 (menor), 93912187 (maior)
: Entre com o numero 3: Iteração 3, até agora: -12292 (menor), 93912187 (maior)
: O menor numero eh -12292, e o maior eh 93912187

* Estudo de caso #4 (Série de potência)

Várias funções matemáticas podem ser escritas através de
séries de potências. Por exemplo, para qualquer número real
x, a exponencial de x pode ser calculada via:

#+begin_export latex
\vfill
$e^x = \sum_{n=0}^{\infty} \frac{x^n}{n!} = \frac{x^0}{0!} + \frac{x^1}{1!} + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} + ...$
\vfill
#+end_export

Podemos truncar a série, ou seja, definir uma quantidade finita de
termos, e calcular a exponencial de forma aproximada usando essa
quantidade de termos.

#+latex: \vfill

Escreva um programa em C que tenha como entrada o número de termos, o
valor de x, e retorne como saída a aproximação da função exponencial
com essa quantidade de termos.

* (#4 Série de potência) Uma solução possível

#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a08-serie-potencia.c
/* Programa para calcular exp(x) de forma aproximada, via series de
potencias
Entradas: valor de x e numero de termos a serem usados na série
Saída: valor aproximado de exp(x) */
#include <stdio.h>
#include <math.h>
int main() {
  int n;            // Entrada: numero de termos
  double x;         // Entrada: valor de x
  double exp_x;     // Saída: exponencial de x
  double termo;     // variavel auxiliar
  int i, cont_fat;  // contadores
  long long fat;    // fatorial
  printf("Entre o valor x e o numero de termos da serie: \n");
  scanf("%lf%d", &x, &n);
  exp_x = 0;
  for (i = 0; i < n; i++) {
    {
      fat = 1;
      for (cont_fat = i; cont_fat >= 1; cont_fat--)
	fat = fat * cont_fat;
    }
    termo = pow(x, i) / fat; // calcula o termo
    exp_x = exp_x + termo; // atualiza valor do somatorio
    printf("Na iteração %d, valor %lf\n", i, exp_x);
  }
  printf("Valor calculado : %lf\n", exp_x);
  printf("Valor de exp(%2.f): %lf\n", x, exp(x));
  return 0;
}
#+END_SRC

* (#4 Série de potência) Compilação & Execução

#+latex: \tiny

#+begin_src shell :results output :dir e
gcc a08-serie-potencia.c -lm; echo "2 14" | ./a.out
#+end_src

#+RESULTS:
#+begin_example
Entre o valor x e o numero de termos da serie: 
Na iteração 0, valor 1.000000
Na iteração 1, valor 3.000000
Na iteração 2, valor 5.000000
Na iteração 3, valor 6.333333
Na iteração 4, valor 7.000000
Na iteração 5, valor 7.266667
Na iteração 6, valor 7.355556
Na iteração 7, valor 7.380952
Na iteração 8, valor 7.387302
Na iteração 9, valor 7.388713
Na iteração 10, valor 7.388995
Na iteração 11, valor 7.389046
Na iteração 12, valor 7.389055
Na iteração 13, valor 7.389056
Valor calculado : 7.389056
Valor de exp( 2): 7.389056
#+end_example

#+begin_src shell :results output :dir e
gcc a08-serie-potencia.c -lm; echo "3 6" | ./a.out
#+end_src

#+RESULTS:
: Entre o valor x e o numero de termos da serie: 
: Na iteração 0, valor 1.000000
: Na iteração 1, valor 4.000000
: Na iteração 2, valor 8.500000
: Na iteração 3, valor 13.000000
: Na iteração 4, valor 16.375000
: Na iteração 5, valor 18.400000
: Valor calculado : 18.400000
: Valor de exp( 3): 20.085537
* Exercício #1 (Newton-Raphson com erro)

*Cálculo aproximado da raiz de 2*

A raiz de 2 pode ser aproximada através do algoritmo de Newton-
Raphson. Partindo de uma aproximação inicial x0 (um chute), podem ser
encontradas aproximações sucessivas através da equação de recorrência
abaixo:

#+latex: \vfill

#+begin_export latex
$x_n = x_{n-1} - \frac{x^{2}_{n-1} - 2}{2 . x_{n-1}}$

$x_0 = val$
#+end_export

sendo =val= um chute inicial fornecido pelo usuário.

#+latex: \vfill

*Enunciado:* Escreva um programa em C que tenha como entradas a
aproximação inicial =x0= e uma tolerância =tol= para o erro, e forneça
como saída a aproximação para a raiz de 2 com esta tolerância. A
tolerância expressa o erro mínimo a ser obtido entre duas parcelas
sucessivas. Então para calcular o erro mínimo, faça a diferença entre
duas parcelas sucessivas, comparando-a com a tolerância fornecida. Se
for menor, estamos satisfeitos e podemos parar.

* Exercício #2 (Taxa de Crescimento)

- O Brasil, com 214 milhões de habitantes, cresce a uma taxa anual de
  1.34% enquanto os Estados Unidos com 332 milhões crescem a uma taxa
  anual de 1.09%.
- Calcule o número de anos que levará para o Brasil ultrapassar os
  Estados Unidos em número de habitantes, considerando-se que a cada
  ano a taxa dos Estados Unidos diminua em 0.1%. A taxa nunca fica
  negativa, no máximo a população permanece a mesma.
- Resposta esperada: ??? anos
