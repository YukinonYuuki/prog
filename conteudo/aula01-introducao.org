# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Introdução \linebreak Algoritmos e Programação}
#+latex: \mytitleslide

* O ato de programar o computador

Ele é diferente de usar o computador

Exemplos de uso
- Editor de texto
- Planilha eletrônica
- Pesquisas na internet
- Correio eletrônico
- Acesso às redes sociais

#+latex: \pause\vfill

*Nós vamos usar o computador para criar novos programas*.

* O que faz um computador?

Um computador pode ser visto como uma máquina universal
- Turing (uma fita ``infinita'' capaz de guardar dados + autômato)

Um computador não tem inteligência
- Ele executa vários *programas*

#+latex: \pause

O que é um programa
- É sequência de passos, uma ``receita''
  - Cada passo diz explicitamente o que deve ser feito

#+latex: \pause

Precisamos de uma forma de descrever os passos
- Uma *linguagem de programação*

* Linguagens de Programação

Em extremos diferentes
- Linguagem humana ou natural
  - Português, Inglês, Francês
- Linguagem de máquina ou binária
  - É o que o computador processa

#+latex: \pause

Permite fazer a ponte entre esses dois extremos
- *Linguagens de programação*

* Modelos e Paradigmas de Linguagens de Programação

Existem inúmeras linguagens de programação

Atendem a diferentes domínios de problemas

#+latex: \pause

_Modelo imperativo_
- Sequências de comandos que transformam dados
- Paradigmas
  - Procedural
  - Orientado a objeto

#+latex: \pause

_Modelo declarativo_
- Foco não é na sequência explícita de comandos
- Paradigmas
  - Funcional
  - Lógico

* Modelo Imperativo Procedural \to Programação Estruturada

Solução implementada através de ações, executadas sequencialmente.
- Variáveis, atribuição, sequência de comandos
- Linguagens procedurais: C, C++, Fortran, Ada, Java

#+latex: \pause\vfill

*Programação Estruturada* \to Técnicas para estruturar programas
- Quais estruturas de controle podem ser empregadas
- Formas de modularização de programas (funções, arquivos)
- Uso de identificadores e comandos
- Alinhamentos, separação de comandos
- Documentação

#+latex: \pause

O que a programação estruturada permite
- Metodologia disciplinada de programação
- Permite construir grandes sistemas
- Aumentar a produtividade
- Minimizar a complexidade
- Aumentar a confiabilidade e a legibilidade
- Facilitar a manutenção

* Como elaborar um programa? (Parte 1)

1. Exposição a um problema (para ser resolvido)
2. Análise do problema para propor uma solução
   - Decomposição e estruturação
3. Criação de um *Algoritmo* para executar a solução
4. Escrita do programa em uma linguagem de programação
   - Este é o *Código Fonte* (/source code/)

#+latex: \pause\vfill

Cuidado
- Muitos atalham do passo 1 diretamente para o passo 4

* O que fazemos com o Código Fonte? (Parte 2)

Temos a figura de um compilador
- Trata-se de um programa como qualquer outro
- Objetivo: traduzir o código fonte para um programa executável

#+latex: \vfill\pause

Código Fonte (.c) \to Compilador \to Programa Executável (.exe)

#+Latex: \vfill\pause

Ciclo de desenvolvimento de um Código Fonte

* Resumo completo da elaboração de programas (Partes 1 e 2)

Parte 1
1. Exposição a um problema (para ser resolvido)
2. Análise do problema para propor uma solução
   - Decomposição e estruturação
3. Criação de um *Algoritmo* para executar a solução
4. Escrita do programa em uma linguagem de programação
   - Este é o *Código Fonte* (/source code/)

Parte 2
1. Emprego do compilador
   - Repetido enquanto o código fonte ter problemas de sintaxe
2. Testes e depuração
   - Verificação se o programa faz o que pensamos que deveria fazer
3. Colocação em produção (execução)

#+latex: \pause

Reflexão
- O que podemos fazer sem e com o computador?
- E o ChatGPT, como ele pode nos ajudar?

* Mas o que é um algoritmo?

Algoritmo é uma sequência finita e lógica de instruções ou passos

básicos que serve para resolver um determinado problema.

#+latex: \pause\vfill

Para criar algoritmos, precisamos do *Pensamento Computacional*
- /Computational Thinking/
- /Computational problem solving/
- Simplesmente: criar ``receitas'' para resolver problemas
  - Explicar para outros seres humanos, para o computador

#+latex: \pause\vfill

*Projeto de Algoritmo* (transformando entradas em saídas)
- Determinar quais ações e em qual ordem levam ao resultado
- Três componentes fundamentais
  - Sequência de ações
  - Ações condicionais
  - Repetição de ações

* Exemplo

#+begin_center
Ler dois valores informados pelo teclado,

calcular e informar a soma destes valores.
#+end_center

#+latex: \pause\vfill


Identificar objetivo, entradas e saídas
- Objetivo: informar a *soma* de dois valores lidos
- Entradas: dois valores numéricos
- Saída: um valor numérico (que representa a soma)

#+latex: \pause

Algoritmo SomaDois
1. Ler A
2. Ler B
3. Soma <- A + B
4. Escrever Soma
5. Terminar

Podemos representar os passos como um fluxograma.

* Implementação do algoritmo na Linguagem C

Algoritmo SomaDois
1. Ler A
2. Ler B
3. Soma <- A + B
4. Escrever Soma
5. Terminar

#+begin_src C :exports code
/*
  Este programa na Linguagem C le dois valores
  inteiros, soma-os e exibe o resultado da soma na tela.
,*/
#include <stdio.h>

int main() {
  int a, b; // As entradas
  int soma; // A saída
  scanf("%d", &a);
  scanf("%d", &b);
  soma = a + b;
  printf("%d", soma);
  return 0;
}
#+end_src

