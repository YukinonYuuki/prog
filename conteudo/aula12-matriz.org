# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Arranjos Multidimensionais}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |
* Sumário

- Revisão rápida sobre vetores
  - Com motivação para matrizes
- Matrizes!
  - Declaração
  - Utilização
  - Inicialização
  - ``Linearização'' na memória
- Exemplos
  - #1 (ler e armazenar notas em uma matriz)
  - #2 (imprimir matriz na tela)
  - #3 (operações comuns)
- Arranjos multidimensionais (com mais de duas dimensões)
- Matrizes de caracteres
- Exercícios
  - #1 (Matriz transposta)
  - #2 (Sistema de Equações Lineares)

* Revisão Vetor #1 -- Arranjo (/aka/ Vetor)

#+begin_center
Guarda um conjunto de elementos.

Todos os elementos são do mesmo tipo.

Permite acesso aleatório a qualquer posição.
#+end_center

Representação gráfica de um arranjo
|   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |  8 |
| / | < | < | < | < | < | < | < | < | <> |
|---+---+---+---+---+---+---+---+---+----|
|   |   |   |   |   |   |   |   |   |    |
|---+---+---+---+---+---+---+---+---+----|

Índice
- Identifica a posição de um elemento no arranjo
- O primeiro é sempre zero

Um arranjo tem um nome e um tamanho máximo na declaração
- O nome é comum para todos os elementos daquele arranjo
- O tamanho indica a capacidade máxima de valores

* Revisão Vetor #2 -- *Declaração* de arranjos na Linguagem C

Na linguagem C
#+begin_src text
<tipo> <nome>[<capacidade>];
#+end_src
- tipo: int, float, double, ...
- nome: um identificador da variável arranjo
- capacidade: um número natural não nulo

#+begin_src C
float nota[9];
#+end_src
|   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |  8 |
| / | < | < | < | < | < | < | < | < | <> |
|---+---+---+---+---+---+---+---+---+----|
|   |   |   |   |   |   |   |   |   |    |
|---+---+---+---+---+---+---+---+---+----|

#+begin_src C
int numeros[4];
#+end_src
|   | 0 | 1 | 2 | 3 |
| / | < | < | < | < |
|---+---+---+---+---|
|   |   |   |   |   |
|---+---+---+---+---|

* Motivação

#+begin_center
Armazenar as 4 notas de um aluno, com um vetor.
#+end_center

#+latex: \pause\vfill

#+begin_src C
float nota[4] = {7.5, 8.2, 9.1, 6.5};
#+end_src
#+attr_latex: :center nil
|   |   0 |   1 |   2 |   3 |
| / |   < |   < |   < |   < |
|---+-----+-----+-----+-----|
|   | 7.5 | 8.2 | 9.1 | 6.5 |
|---+-----+-----+-----+-----|

#+latex: \pause\vfill

#+begin_center
Como armazenar as 4 notas de vários alunos?

Talvez com ``vários vetores''!
#+end_center

* Arranjo 2D (/aka/ Matrizes!)

Vamos armazenar quatro notas de uma turma de cinco alunos

#+begin_src C
float notas[5][4];
#+end_src
#+attr_latex: :center nil
|   |   | 0 | 1 | 2 | 3 |
| / |   | < | < | < | < |
|---+---+---+---+---+---|
|   | 0 |   |   |   |   |
|---+---+---+---+---+---|
|   | 1 |   |   |   |   |
|---+---+---+---+---+---|
|   | 2 |   |   |   |   |
|---+---+---+---+---+---|
|   | 3 |   |   |   |   |
|---+---+---+---+---+---|
|   | 4 |   |   |   |   |

#+latex: \vfill\pause

As coordenadas são com duas dimensões
#+begin_src C
notas[2][3] = 8.5;
#+end_src
#+attr_latex: :center nil
|   |   | 0 | 1 | 2 |   3 |
| / |   | < | < | < |   < |
|---+---+---+---+---+-----|
|   | 0 |   |   |   |     |
|---+---+---+---+---+-----|
|   | 1 |   |   |   |     |
|---+---+---+---+---+-----|
|   | 2 |   |   |   | 8.5 |
|---+---+---+---+---+-----|
|   | 3 |   |   |   |     |
|---+---+---+---+---+-----|
|   | 4 |   |   |   |     |

* *Declaração* de arranjos 2D na Linguagem C

#+begin_src text
<tipo> <nome>[<capacidade 1a dimensão>][<capacidade 2a dimensão>];
#+end_src
- tipo: int, float, double, ...
- nome: um identificador da variável arranjo
- capacidades: números naturais não nulos

#+latex: \pause\vfill

#+begin_src C
float nota[3][9];
#+end_src
#+attr_latex: :center nil
|   |   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |  8 |
| / |   | < | < | < | < | < | < | < | < | <> |
|---+---+---+---+---+---+---+---+---+---+----|
|   | 0 |   |   |   |   |   |   |   |   |    |
|---+---+---+---+---+---+---+---+---+---+----|
|   | 1 |   |   |   |   |   |   |   |   |    |
|---+---+---+---+---+---+---+---+---+---+----|
|   | 2 |   |   |   |   |   |   |   |   |    |
|---+---+---+---+---+---+---+---+---+---+----|

#+latex: \pause\vfill

A capacidade da primeira dimensão pode ser omitida
- O compilador a calcula em função da capacidade da 2a dimensão
#+begin_src C
int valores[][4] = {2, 3, 5, 4, 8, 0, 9, 1}; // 2x4
#+end_src
#+attr_latex: :center nil
|   |   | 0 | 1 | 2 | 3 |
| / |   | < | < | < | < |
|---+---+---+---+---+---|
|   | 0 | 2 | 3 | 5 | 4 |
|---+---+---+---+---+---|
|   | 1 | 8 | 0 | 9 | 1 |
|---+---+---+---+---+---|

* *Utilização* de arranjos na Linguagem C

#+begin_src text
<nome>[<expr. p/ índice 1a dimensão>][<expr. p/ índice 2a dimensão>];
#+end_src
- nome: o identificador da variável arranjo já declarada
- expressões: constante, identificador, ou expressão
  - Uma vez avaliada, deve resultar em um valor inteiro válido
    - Entre 0 e a capacidade que foi declarada p/ aquela dimensão

#+latex: \pause\vfill

#+begin_src C
int i = 4, j = 3;
float notas[5][4] = {0};
scanf("%f", &nota[2][3]);
nota[1][3] = 7.5;
nota[2][2] = nota[1][3] + 2;
if(nota[0][2] > 6.0){
  printf("Aprovado.\n");
}
nota[i][j] = 5.6;
#+end_src
#+latex: {\scriptsize
#+attr_latex: :center nil
|   |   |   0 |   1 |   2 |   3 |
| / |   |   < |   < |   < |   < |
|---+---+-----+-----+-----+-----|
|   | 0 | 0.0 | 0.0 | 0.1 | 0.0 |
|---+---+-----+-----+-----+-----|
|   | 1 | 0.0 | 0.0 | 0.0 | 7.5 |
|---+---+-----+-----+-----+-----|
|   | 2 | 0.0 | 0.0 | 9.5 |  XX |
|---+---+-----+-----+-----+-----|
|   | 3 | 0.0 | 0.0 | 0.0 | 0.0 |
|---+---+-----+-----+-----+-----|
|   | 4 | 0.0 | 0.0 | 0.0 | 5.6 |
#+latex: }

XX: local onde será registrado o valor lido pelo =scanf=

* Inicialização de arranjos 2D

Ao serem criados, arranjos, como as demais variáveis, contêm lixo.

Devemos sempre inicializá-los com valores padrão
1. Em tempo de compilação, automaticamente
   #+begin_src C
   int x[2][3] = { {1,2,-1} , {2,0,3} };
   char y[2][2] = { {'a','h'} , {'o','9'} };
   char nomes[2][20] = {"Jose", "Maria" };
   #+end_src
   #+latex: \pause
2. Em tempo de execução, por atribuição (com um =for= por exemplo)
   #+begin_src C
   #define N_LINHAS 2
   #define N_COLUNAS 20
   int i, j;
   char nomes[N_LINHAS][N_COLUNAS];
   for (i = 0; i < N_LINHAS; i++) {
      for (j = 0; j < N_COLUNAS; j++) {
	   nomes[i][j] = '\0';
      }
   }
   #+end_src

* Como uma matriz é registrada em memória

A memória é uma fita. Qualquer estrutura é portanto ``linearizada''.

#+begin_src C
float m[4][3] = {  { 5.0, 10.0, 15.0 },
                   {20.0, 25.0, 30.0 },
                   {35.0, 40.0, 45.0 },
                   {50.0, 55.0, 60.0 }  };
#+end_src

Representação gráfica em forma de ``matriz''

#+attr_latex: :center nil
|   |   |    0 |    1 |    2 |
| / |   |    < |    < |    < |
|---+---+------+------+------|
|   | 0 |  5.0 | 10.0 | 15.0 |
|---+---+------+------+------|
|   | 1 | 20.0 | 25.0 | 30.0 |
|---+---+------+------+------|
|   | 2 | 35.0 | 40.0 | 45.0 |
|---+---+------+------+------|
|   | 3 | 50.0 | 55.0 | 60.0 |
|---+---+------+------+------|

#+latex: \vfill\pause

Na memória, teremos a organização (endereços indicativos acima)

#+latex: {\tiny
| / | >   |   > |    > |    > |    > |    > |    > |    > |    > |    > |    > |    > |    > |     |
|   | ... | 142 |  146 |  150 |  154 |  158 |  162 |  166 |  170 |  174 |  178 |  182 |  186 | ... |
|---+-----+-----+------+------+------+------+------+------+------+------+------+------+------+-----|
|   |     | 5.0 | 10.0 | 15.0 | 20.0 | 25.0 | 30.0 | 35.0 | 40.0 | 45.0 | 50.0 | 55.0 | 60.0 |     |
#+latex: }

* Exemplo #1 (ler e armazenar notas em uma matriz)

Ler e armazenar as 4 notas de cada um dos alunos de uma turma (10
alunos).  Calcular e informar a média da primeira nota. Quantos alunos
tem a primeira nota superior a esta média?

#+latex: \vfill

Como fica a declaração da matriz?
- 10 alunos
- 4 notas

#+latex: \pause

#+BEGIN_SRC C
float notas[10][4]; 
#+END_SRC

Haveria outra forma?

#+latex: \pause

- 4 notas
- 10 alunos

#+BEGIN_SRC C
float notas[4][10];
#+END_SRC

* (#1) Code ~a17-notas.c~

Vamos codificar juntos!
- Em que ordem vamos ler as notas?

#+latex: \vfill

#+latex: \begin{multicols}{2}
#+attr_latex: :options fontsize=\scriptsize
#+BEGIN_SRC C :tangle e/a17-notas.c
#include <stdio.h>
#define NALUNOS 10
#define NNOTAS 4
int main(){
  //10 alunos, cada um com 4 notas
  float notas[NALUNOS][NNOTAS];
  int a, n, soma, contador = 0;
  float media;
  for (a = 0; a < NALUNOS; a++){
    for (n = 0; n < NNOTAS; n++){
      scanf("%f", &notas[a][n]);
    }
  }

  soma = 0;
  for (a = 0; a < NALUNOS; a++){
    soma += notas[a][0];
  }
  media = (float)soma/NALUNOS;
  //printf da media

  contador = 0;
  for (a = 0; a < NALUNOS; a++){
    if (notas[a][0] > media) contador++;
  }
  //printf do contador
  return 0;
}
#+END_SRC
#+latex: \end{multicols}\vspace{-0.3cm}

* Exemplo #2 (imprimir matriz na tela)

#+begin_center
Vamos supor uma matriz =m= de valores inteiros com 10 linhas e 3
colunas, preenchida com valores aleatórios entre 1 e 99. Devemos
escrever um programa que a imprima na tela em formato de
matriz. Abaixo um exemplo (assumindo que nos espaços em branco terão
os valores inteiros gerados de maneira aleatória).
#+end_center

|   |   | 0 | 1 | 2 |
| / | > | > | > | > |
|---+---+---+---+---|
|   | 0 |   |   |   |
|---+---+---+---+---|
|   | 1 |   |   |   |
|---+---+---+---+---|
|   | 2 |   |   |   |
|---+---+---+---+---|
|   | 3 |   |   |   |
|---+---+---+---+---|
|   | 4 |   |   |   |
|---+---+---+---+---|
|   | 5 |   |   |   |
|---+---+---+---+---|
|   | 6 |   |   |   |
|---+---+---+---+---|
|   | 7 |   |   |   |
|---+---+---+---+---|
|   | 8 |   |   |   |
|---+---+---+---+---|
|   | 9 |   |   |   |
|---+---+---+---+---|

* (#2) Code ~a17-imprime-matriz.c~

#+latex: \begin{multicols}{2}
#+attr_latex: :options fontsize=\scriptsize
#+BEGIN_SRC C :tangle e/a17-imprime-matriz.c
#include <stdio.h>
#include <stdlib.h>

//Limites da nossa matriz
#define NL 10
#define NC 3

//Limites de valores aleatórios
#define MIN 1
#define MAX 99

int main(){
  //A matriz m e seus índices
  int m[NL][NC];
  int l, c;

  // Define a semente para aleatórios
  srand(0);

  // inicializar a matriz
  // com valores aleatórios
  for (l = 0; l < NL; l++){
    for (c = 0; c < NC; c++){
      m[l][c] = MIN+(rand()%(MAX-MIN+1));
    }
  }

  // imprimir o cabeçalho
  printf("   ");
  for (c = 0; c < NC; c++){
    printf("%2d ", c);
  }
  printf("\n");
  // imprimir o conteúdo da matriz
  for (l = 0; l < NL; l++){
    printf("%2d ", l);
    for (c = 0; c < NC; c++){
      printf("%2d", m[l][c]);
      if (c+1 < NC){
	printf(" ");
      }
    }
    printf("\n");
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}\vspace{-0.3cm}
* Exemplo #3 (operações comuns)

Dada uma matriz inteira ~m~ com número de linhas igual a ~NL~ e número de
colunas igual a ~NC~, preenchê-la com números aleatórios de -10 a 10 e
imprimir:

1. o maior elemento de cada coluna da matriz
2. a média dos elementos de cada linha
3. o produto de todos os elementos diferentes de zero
4. quantos elementos são negativos
5. posição ocupada (linha-coluna) por um elemento cujo valor será lido
   pelo programa (via teclado). Informar se houver mais de uma
   ocorrencia, ou se o elemento não estiver presente na matriz

* (#3) Code ~a17-init.c~

#+latex: \vspace{-0.7cm}\begin{multicols}{3}
#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a17-init.c
#include <stdio.h>
#include <stdlib.h>
//Limites da nossa matriz
#define NL 10
#define NC 3

//Limites de valores aleatórios
#define MI -10
#define MA 10
int main(){
  //A matriz m e seus índices
  int m[NL][NC];
  int l, c;

  // Define a semente
  srand(0);

  // inicializar a matriz
  // com valores aleatórios
  for (l = 0; l < NL; l++){
    for (c = 0; c < NC; c++){
      m[l][c] = MI+
	(rand()%(MA-MI+1));
    }
  }

  //imprime a matriz
  for (l = 0; l < NL; l++){
    for (c = 0; c < NC; c++){
      printf("%2d", m[l][c]);
      if (c+1 < NC){
	printf(" ");
      }
    }
    printf("\n");
  }

  //#3.1 maior por coluna
  for (c = 0; c < NC; c++){
    int maior = m[0][c];
    for (l = 0; l < NL; l++){
      if (m[l][c] > maior)
	maior = m[l][c];
    }
    printf("#3.1 C. %d é %d.\n",
	   c, maior);
  }

  //#3.2 media por linha
  for (l = 0; l < NL; l++){
    int soma = 0;
    for (c = 0; c < NC; c++){
      soma += m[l][c];
    }
    printf("#3.2 M. %d é %.2f.\n",
	   l, (float)soma/NC);
  }

  //#3.3 produto de não zeros
  int produto = 1;
  for (l = 0; l < NL; l++){
    for (c = 0; c < NC; c++){
      if (m[l][c])
	produto *= m[l][c];
    }
  }
  printf("#3.3 P. %d\n", produto);

  //#3.4 quantos negativos
  int negativos = 0;
  for (l = 0; l < NL; l++){
    for (c = 0; c < NC; c++){
      if (m[l][c] < 0)
	negativos++;
    }
  }
  printf("#3.4 N. %d\n", negativos);

  //#3.5 Buscar valor
  int valor, achou, pl, pc;
  printf("Entre com valor -> ");
  scanf("%d", &valor);
  achou = 0;
  for (l = 0; l < NL; l++){
    for (c = 0; c < NC; c++){
      if (m[l][c] == valor){
	achou = 1;
	pl = l;
	pc = c;
      }
    }
  }
  if (achou){
    printf("#3.5 Achou@[%d][%d]\n",
      pl, pc);
  }else{
    printf("#3.5 Não achou.\n");
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}\vspace{-0.3cm}
* Caso geral, multidimensional (> 2 dimensões)

#+begin_center
Temos que armazenar notas de alunos de turmas e escolas diferentes.

Temos 6 escolas; cada uma com 2 turmas;

cada uma com 10 alunos; cada um com 5 notas.
#+end_center

#+begin_src C
float n1[5];          // Vetor (arranjo 1D): 5 notas
float n2[10][5];      // Matriz (arranjo 2D): 10 alunos, 5 notas
float n3[2][10][5];   // Arranjo 3D: 2 turmas, 10 alunos, 5 notas
float n4[6][2][10][5];// Arranjo 4D: 6 escolas, 2 turmas, 10 alunos, 5 notas
#+end_src

#+latex: \pause\vfill

Melhor com constantes

#+begin_src C
#define N_NOTAS 5
#define N_ALUNOS 10
#define N_TURMAS 2
#define N_ESCOLAS 6

float n1[N_NOTAS];                                // Vetor (arranjo 1D)
float n2[N_ALUNOS][N_NOTAS];                      // Matriz (arranjo 2D)
float n3[N_TURMAS][N_ALUNOS][N_NOTAS];            // Arranjo 3D
float n4[N_ESCOLAS][N_TURMAS][N_ALUNOS][N_NOTAS]; // Arranjo 4D
#+end_src

Ao acessar, usar índices específicos para cada dimensão.

* Outro exemplo de emprego do Arranjo 4D

#+begin_center
10 lojas; 5 setores por loja; 30 produtos por setor; 12 meses

O arranjo armazena quantidade de itens de cada

produto vendido em cada mês, por setor e por loja.
#+end_center

#+begin_src C
#define N_LOJAS 10
#define N_SETORES 5
#define N_PRODUTOS 30
#define N_MESES 12
int quantidade_vendas[N_LOJAS][N_SETORES][N_PRODUTOS][N_MESES] = {0};
#+end_src

* Exemplo de emprego do Arranjo 2D (Matrizes)

#+begin_center
Ler os nomes dos alunos de uma turma, suas notas finais (valor real
entre 0 e 10), e frequência total (inteiro entre 0 e 45). Depois,
imprimir os nomes e o conceito final, de acordo com a seguinte
conversão:
#+end_center

| Nota        | Conceito |
|-------------+----------|
| 8.5 -- 10.0 | A        |
| 7.5 -- 8.4  | B        |
| 6.0 -- 7.4  | C        |
| 0.0 -- 5.9  | D        |

Se o aluno não alcançar a frequência mínima (75%) \to Conceito FF

#+latex: \vfill

Dica
- Para criar vetores de /strings/, usamos matrizes do tipo =char=.

* Código

#+latex: \vspace{-0.7cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\scriptsize
#+BEGIN_SRC C :tangle e/a17-matrizes-caracteres.c
#include <stdio.h>
#include<string.h>
#define TAM_TURMA 40
#define TAM_NOME 20
int main() {
  char nome[TAM_TURMA][TAM_NOME];
  float nota[TAM_TURMA];
  int freq[TAM_TURMA];
  char tela[TAM_TURMA+10];
  int tam, i;
  // leitura das entradas
  printf("Tamanho da turma: ");
  scanf("%d", &tam);
  getchar();
  for (i = 0;
       i < tam && i < TAM_TURMA;
       i++) {
    printf("Nome %d:", i);
    fgets(nome[i], TAM_NOME, stdin);
    nome[i][strlen(nome[i])-1] = '\0';
    printf("[%s]\n", nome[i]);
    printf("Nota %d:", i);
    scanf("%f", &nota[i]);
    printf("Frequência %d:", i);
    scanf("%d", &freq[i]);
  }


  printf("\n\n");
  // imprime os nomes dos alunos
  // e o conceito final
  for (i = 0;
       i < tam && i < TAM_TURMA;
       i++) {
    strcpy(tela, nome[i]);
    if (freq[i] < .75 * 45)
      strcat(tela, ": conceito FF");
    else
      if (nota[i]>8.4)
	strcat(tela, ": conceito A");
      else
	if (nota[i]>7.4)
	  strcat(tela, ": conceito B");
	else
	  if (nota[i]>5.9)
	    strcat(tela, ": conceito C");
	  else
	    strcat(tela, ": conceito D");
    printf("%s\n", tela);
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}\vspace{-0.3cm}

* Exercício #1 (Matriz transposta)

Preencha (com números aleatórios de 1 a 99, supondo que a semente de
números aleatórios seja 0) uma matriz quadrada (de inteiros) de ordem
10 e obtenha a sua transposta. Imprima as duas matrizes para
averiguação.

* Exercício #2 (Sistema de Equações Lineares)

_Enunciado_: Escrever um programa que leia do teclado os coeficientes de
um sistema linear triangular superior, os termos independentes, e
calcule (imprimindo na tela) o vetor solução. Assuma que o sistema
possui solução única. Suponha um =n= máximo.

#+latex: \vfill\pause

Um sistema linear triangular superior de ordem =n=:

#+BEGIN_EXPORT latex
\begin{align*}
a_{11}x_{1} + a_{12} x_2 + ... + a_{13} x_n &= \,b_1 \\
a_{21}x_{1} + a_{22} x_2 + ... + a_{23} x_n &= \,b_2 \\
... \\
a_{n1}x_{1} + a_{n2} x_2 + ... + a_{n3} x_n &= \,b_n \\
\end{align*}
#+END_EXPORT

#+latex: \vfill\pause

Utilizamos um arranjo 1D (vetor) para registrar os termos
independentes e um arranjo 2D (matriz) para registrar os coeficientes.
#+begin_src C
#define N 4
float b[N] = {0};
float A[N][N] = {0};
#+end_src
