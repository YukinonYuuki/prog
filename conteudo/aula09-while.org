# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Comando de laço =while= e =do-while=}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |
* Motivação

Relembrando...

#+latex: \begin{boxedminipage}{\linewidth}\scriptsize

*Cálculo aproximado da raiz de 2*

A raiz de 2 pode ser aproximada através do algoritmo de Newton-
Raphson. Partindo de uma aproximação inicial x0 (um chute), podem ser
encontradas aproximações sucessivas através da equação de recorrência
abaixo:

#+latex: \vfill

#+begin_export latex
$x_n = x_{n-1} - \frac{x^{2}_{n-1} - 2}{2 . x_{n-1}}$

$x_0 = val$
#+end_export

sendo =val= um chute inicial fornecido pelo usuário.

#+latex: \vfill

*Enunciado:* Escreva um programa em C que tenha como entradas a
aproximação inicial =x0= e uma tolerância =tol= para o erro, e forneça
como saída a aproximação para a raiz de 2 com esta tolerância. A
tolerância expressa o erro mínimo a ser obtido entre duas parcelas
sucessivas. Então para calcular o erro mínimo, faça a diferença entre
duas parcelas sucessivas, comparando-a com a tolerância fornecida. Se
for menor, estamos satisfeitos e podemos parar.

#+latex: \end{boxedminipage}

#+latex: \pause

Observações
1. Não sabemos de antemão o número de iterações
2. Sabemos a _condição de parada_
   - ``faça a diferença entre duas parcelas sucessivas, comparando-a
     com a tolerância fornecida. Se for menor, estamos satisfeitos e
     podemos parar.''

* Sumário

Laços iterativos (/loops/)
- +*para* / *for*+
- *enquanto* / *while*
- *faça... enquanto* / *do-while*

#+latex: \pause

Usados em situações onde não sabemos quantas repetições serão necessárias
- ``enquanto não chover'', ficarei na praia
- ``enquanto o ônibus não chega'', observo os ciclistas passarem

* O comando =while=

Na linguagem C
#+begin_src C
while (/*expressão lógica*/) {
   // bloco de comandos
}
#+end_src
#+latex: \pause
Exemplo
#+begin_src C
int onibusChegou = FALSO;
while (onibusChegou == FALSO) {
  observoCiclitas(); // Uma função de uma biblioteca hipotética
  if (onibusEstaNaParada() == VERDADE) {
    onibusChegou = VERDADE;
  }
}
#+end_src
#+latex: \pause
Na linguagem de algoritmos
#+begin_src text
1. enquanto(condição)
   1.1 comando #1
   1.2 comando #2
#+end_src

#+begin_center
Vamos ver como funciona o fluxograma...
#+end_center

* Detalhamento do comando =while=

#+begin_src C
while (/*#1*/) {
   // #2
   // #3
}
#+end_src

#1
- expressão lógica de controle do laço
- verificado se é verdade antes de cada iteração

#2 e #3
- comandos do bloco, executados sempre
  - sempre após verificação se #1 é verdadeiro 

#+latex: \pause

Notas adicionais
- Se #1 for falso desde o início, nenhuma iteração é executada
- Sempre evitar laço infinito: efeitos de #2 e #3 levam #1 ser falso

* Exemplos para verificar conhecimento

O que será impresso na tela?

** Left
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+begin_src C
int a = 1;
while (a < 5)
  a = a + 1;
printf("%d\n", a);
#+end_src

#+latex: \pause\vfill

#+begin_src C
for(a = 1; a <= 5; a++)
  printf("%d\n", a);

a = 1;
while (a <= 5){
  printf("%d\n", a);
  a++;
}
#+end_src

#+latex: \pause

** Right
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+begin_src C
int a = 6, b = 0;
while (a-2 > b+1) {
  printf("%d %d\n", a, b);
  a--;
}
printf("%d\n", a);
#+end_src

* Exemplo #1: voltando ao exemplo de motivação

#+latex: \begin{boxedminipage}{\linewidth}\tiny

*Cálculo aproximado da raiz de 2*

A raiz de 2 pode ser aproximada através do algoritmo de Newton-
Raphson. Partindo de uma aproximação inicial x0 (um chute), podem ser
encontradas aproximações sucessivas através da equação de recorrência
abaixo:

#+latex: \vfill

#+begin_export latex
$x_n = x_{n-1} - \frac{x^{2}_{n-1} - 2}{2 . x_{n-1}}$

$x_0 = val$
#+end_export

sendo =val= um chute inicial fornecido pelo usuário.

#+latex: \vfill

*Enunciado:* Escreva um programa em C que tenha como entradas a
aproximação inicial =x0= e uma tolerância =tol= para o erro, e forneça
como saída a aproximação para a raiz de 2 com esta tolerância. A
tolerância expressa o erro mínimo a ser obtido entre duas parcelas
sucessivas. Então para calcular o erro mínimo, faça a diferença entre
duas parcelas sucessivas, comparando-a com a tolerância fornecida. Se
for menor, estamos satisfeitos e podemos parar.

#+latex: \end{boxedminipage}

#+latex: \pause\vfill

A tolerância expressa o erro mínimo a ser obtido entre duas parcelas
sucessivas. Então para calcular o erro mínimo, faça a diferença entre
duas parcelas sucessivas, comparando-a com a tolerância fornecida. Se
for menor, estamos satisfeitos e podemos parar.

* Exemplo #1: código

=a09-newton-raphson.c=
#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a09-newton-raphson.c
/* Programa para calcular raiz quadrada de 2 usando Newton-Raphson
Entrada: numero de iteracoes (inteiro) e “chute” inicial
Saida: valor aproximado de raiz de 2*/
#include <stdio.h>
#include <math.h>
#include <float.h>
int main() {
  double x0, xn; // aproximacao inicial e valores usados na iteracao
  double dif, tol; //diferença
  printf("Entre o erro tolerado:\n");
  scanf("%lf", &tol);
  printf("Entre a aproximacao inicial de raiz de 2:\n");
  scanf("%lf", &x0);

  dif = DBL_MAX;
  while(dif > tol) {
    xn = x0 - (x0*x0-2)/(2*x0);
    dif = fabs(x0 - xn);
    printf("%f valor aproximado é %1.15f\n", dif, xn);
    x0 = xn;
  }
  printf("sqrt(2)         : %1.15f\n"
         "Valor aproximado: %1.15f\n", sqrt(2), xn);
  return 0;
}
#+END_SRC

* Exemplo #2: Notas dos alunos

Objetivo: Processar as notas de alunos
- Não sabemos de antemão quantos alunos há no total;
- Para cada aluno, ler suas três notas, calcular e informar a média;
- Para encerrar a turma, informar a primeira nota com valor superior a
  10 (valor inválido servindo como sinal de encerramento de leitura de
  notas);
- No final, informar a média da turma.

* Exemplo #2: código

=a09-processa-notas.c=
#+BEGIN_SRC C :tangle e/a09-processa-notas.c
//Processa notas dos alunos de uma turma
#include <stdio.h>
int main ( )
{
  float n1, n2, n3; //notas de um aluno
  float media, soma; // média do aluno e acumulador de médias da turma
  int al = 0; //variável de contar alunos
  soma=0; // inicializa acumulador de médias
  printf("Informe notas do aluno %d: ", al + 1);
  scanf("%f", &n1); // lê só a primeira nota do 1o aluno
  while (n1 <= 10) { // só executa se a 1a nota for <= 10
    al = al + 1; // conta este aluno
    scanf("%f%f", &n2, &n3); // lê as outras nota do aluno
    media = (n1 + n2 + n3)/3;
    soma = soma + media;
    printf("\nMedia do aluno %d : %6.2f\n", al, media);
    printf("Informe notas do aluno %d: ",al + 1);
    scanf("%f", &n1); // lê só a primeira nota do próximo aluno
  }
  if (al > 0) // só calcula média da turma se existir 1 (ou mais) aluno
    printf("\nMedia da turma: %.2f\n", soma/al);
  return 0;
}
#+END_SRC

* Exemplo #2: Execução de teste

#+begin_src shell :results output :exports both :dir e
gcc a09-processa-notas.c; echo "10.0 9.2 2.2 3.2 4.5 2.1 11" | ./a.out 
#+end_src

#+RESULTS:
: Informe notas do aluno 1: 
: Media do aluno 1 :   7.13
: Informe notas do aluno 2: 
: Media do aluno 2 :   3.27
: Informe notas do aluno 3: 
: Media da turma: 5.20

* Sumário: seguindo adiante

Laços iterativos (/loops/)
- +*para* / *for*+
- +*enquanto* / *while*+
- *faça... enquanto* / *do-while*

* O comando =do-while=

Na linguagem C
#+begin_src C
do {
   // bloco de comandos
} while (/*expressão lógica*/);
#+end_src
#+latex: \pause
Exemplo
#+begin_src C
int onibusChegou = FALSO;
do {
  observoCiclitas(); // Uma função de uma biblioteca hipotética
  if (onibusEstaNaParada() == VERDADE) {
    onibusChegou = VERDADE;
  }
} while (onibusChegou == FALSO);
#+end_src
#+latex: \pause
Na linguagem de algoritmos
#+begin_src text
1. faça
   1.1 comando #1
   1.2 comando #2
   enquanto (condição)
#+end_src

#+begin_center
Vamos ver como funciona o fluxograma...
#+end_center

* Detalhamento do comando =do-while=

#+begin_src C
do {
   // #2
   // #3
} while (/*#1*/);
#+end_src

#1
- expressão lógica de controle do laço
- verificação *no final de cada iteração*

#2 e #3
- comandos do bloco, executados *pelo menos uma vez*

#+latex: \pause

Notas adicionais
- Se #1 for falso desde o início, *a primeira iteração ainda é executada*
- Sempre evitar laço infinito: efeitos de #2 e #3 levam #1 ser falso

* Exemplos para verificar conhecimento

O que será impresso na tela?

** Left
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+begin_src C
int a = 0;
do {
  a++;
  printf("%d\n", a);
} while(a < 5);
#+end_src

#+latex: \pause\vfill

#+begin_src C
for(a = 1; a <= 5; a++)
  printf("%d\n", a);

a = 1;
do {
  printf("%d\n", a);
  a++;
} while (a <= 5);
#+end_src

#+latex: \pause

** Right
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+begin_src C
int numero, achou = 0;
do {
  scanf("%d", &numero);
  printf("%d\n", numero);
  if (numero == 250)
    achou = 1;
} while(!achou);
#+end_src

#+latex: \pause

#+begin_src C
int numero, continuar;
do {
  scanf("%d", &numero);
  printf("%d\n", numero);

  printf("Informar outro? Digite:\n"
         "1 para sim,\n"
         "0 para não)\n");
  scanf("%d", &continuar);
} while(continuar);
#+end_src

* Exemplo #1: voltando ao exemplo de motivação

#+latex: \begin{boxedminipage}{\linewidth}\tiny

*Cálculo aproximado da raiz de 2*

A raiz de 2 pode ser aproximada através do algoritmo de Newton-
Raphson. Partindo de uma aproximação inicial x0 (um chute), podem ser
encontradas aproximações sucessivas através da equação de recorrência
abaixo:

#+latex: \vfill

#+begin_export latex
$x_n = x_{n-1} - \frac{x^{2}_{n-1} - 2}{2 . x_{n-1}}$

$x_0 = val$
#+end_export

sendo =val= um chute inicial fornecido pelo usuário.

#+latex: \vfill

*Enunciado:* Escreva um programa em C que tenha como entradas a
aproximação inicial =x0= e uma tolerância =tol= para o erro, e forneça
como saída a aproximação para a raiz de 2 com esta tolerância. A
tolerância expressa o erro mínimo a ser obtido entre duas parcelas
sucessivas. Então para calcular o erro mínimo, faça a diferença entre
duas parcelas sucessivas, comparando-a com a tolerância fornecida. Se
for menor, estamos satisfeitos e podemos parar.

#+latex: \end{boxedminipage}

#+latex: \pause\vfill

Vamos usar =do-while=.

* Exemplo #1: código

=a09-newton-raphson-do-while.c=
#+attr_latex: :options fontsize=\scriptsize
#+BEGIN_SRC C :tangle e/a09-newton-raphson-do-while.c
/* Programa para calcular raiz quadrada de 2 usando Newton-Raphson
Entrada: numero de iteracoes (inteiro) e “chute” inicial
Saida: valor aproximado de raiz de 2*/
#include <stdio.h>
#include <math.h>
int main() {
  double x0, xn; // aproximacao inicial e valores usados na iteracao
  double tol;
  printf("Entre o erro tolerado:\n");
  scanf("%lf", &tol);
  printf("Entre a aproximacao inicial de raiz de 2:\n");
  scanf("%lf", &x0);
  //dif = DBL_MAX; //não é mais necessário
  do {
    xn = x0 - (x0*x0-2)/(2*x0);
    dif = fabs(x0 - xn);
    printf("%f valor aproximado é %1.15f\n", dif, xn);
    x0 = xn;
  } while(dif > tol);
  printf("sqrt(2)         : %1.15f\n"
         "Valor aproximado: %1.15f\n", sqrt(2), xn);
  return 0;
}
#+END_SRC

* Exemplo #2: Notas dos alunos

Objetivo: Processar as notas de alunos
- Não sabemos de antemão quantos alunos há no total;
- Para cada aluno, ler suas três notas, calcular e informar a média;
- Para encerrar a turma, informar a primeira nota com valor superior a
  10 (valor inválido servindo como sinal de encerramento de leitura de
  notas);
- No final, informar a média da turma.

#+latex: \vfill

Vamos usar =do-while=.

* Exemplo #2: código

=a09-processa-notas-dowhile.c=
#+BEGIN_SRC C :tangle e/a09-processa-notas-dowhile.c
//Processa notas dos alunos de uma turma
#include <stdio.h>
int main () {
  float n1, n2, n3; //notas de um aluno
  float media, soma = 0; // média do aluno e acumulador de médias da turma
  int al = 0; //variável de contar alunos
  printf("Informe notas do aluno %d: ", al + 1);
  scanf("%f", &n1); // lê só a primeira nota do 1o aluno
  if (n1 <= 10) { // só executa se a 1a nota for <= 10
    do {
      al = al + 1; // conta este aluno
      scanf("%f%f", &n2, &n3); // lê as outras nota do aluno
      media = (n1 + n2 + n3)/3;
      soma = soma + media;
      printf("Media do aluno %d : %6.2f\n", al, media);
      printf("Informe notas do aluno %d: ",al + 1);
      scanf("%f", &n1); // lê só a primeira nota do próximo aluno
    }while(n1 <= 10);
  }
  if (al > 0) // só calcula média da turma se existir 1 (ou mais) aluno
    printf("\nMedia da turma: %.2f\n", soma/al);
  return 0;
}
#+END_SRC

* Execução de teste                                                :noexport:

#+begin_src shell :results output :dir e :exports both
gcc a09-processa-notas-dowhile.c; echo "10.0 9.2 2.2 3.2 4.5 2.1 11" | ./a.out 
#+end_src

#+RESULTS:
: Informe notas do aluno 1: Media do aluno 1 :   7.13
: Informe notas do aluno 2: Media do aluno 2 :   3.27
: Informe notas do aluno 3: 
: Media da turma: 5.20

* Verificação de erros com =while= e/ou =do while=

Lembrando que caso o número seja negativo, o programa termina.

#+BEGIN_SRC C :tangle e/a09-fatorial.c
/*calcula o fatorial de um numero inteiro
Entrada: numero inteiro positivo
Saida: fatorial do numero ou mensagem de erro */
#include <stdio.h>
int main () {
  int num, fat, i;
  printf("Entre um numero inteiro positivo: " );
  scanf("%d", &num);
  if (num < 0)
    printf("Tsk tsk, o número informado é negativo, "
	   "portanto fatorial não definido.\n");
  else { //implementação como na fórmula
    fat = 1; // se for zero, está pronto
    for (i= num; i >= 1; i--)
      fat = fat * i;
    printf ("Fatorial de %d eh %d.\n", num, fat);
  }
  return 0;
}
#+END_SRC

* Validando a entrada

#+BEGIN_SRC C :tangle e/a09-fatorial-valida.c
/*calcula o fatorial de um numero inteiro
Entrada: numero inteiro positivo
Saida: fatorial do numero */
#include <stdio.h>
int main () {
  int num, fat, i;
  do {
    printf("Entre um numero inteiro positivo: " );
    scanf("%d", &num);
  } while (num < 0);
  fat = 1; // se for zero, está pronto
  for (i= num; i >= 1; i--)
    fat = fat * i;
  printf ("Fatorial de %d eh %d.\n", num, fat);
  return 0;
}
#+END_SRC

* Permitindo múltiplos cálculos de fatorial

Ao invés de terminar após o cálculo, pede outro número.

#+BEGIN_SRC C :tangle e/a09-fatorial-valida-multiplos.c
/*Repete várias vezes o cálculo do fatorial
Entradas: numeros inteiros positivos
Saida: fatorial do numero ou mensagem de erro */
#include <stdio.h>
int main () {
  int num, fat, i, resposta;
  do {
    printf("Entre um numero inteiro positivo: " );
    scanf("%d", &num);
    while (num < 0){
      printf("Número positivo!! Forneça novamente: " );
      scanf("%d", &num);
    }
    fat = 1; // se for zero, está pronto
    for (i= num; i >= 1; i--)
      fat = fat * i;
    printf ("Fatorial de %d eh %d.\n", num, fat);

    printf ("Quer calcular outro número? Sim(1) ou Não(0): ");
    scanf("%d", &resposta);
  }while(resposta);
  return 0;
}
#+END_SRC
* Comparação entre os comandos de repetição

| *Comando*  | *Condição*      | *Repetições* |
|          | (verificação) |   (mínimo) |
|----------+---------------+------------|
| =for=      | início        |          0 |
| =while=    | início        |          0 |
| =do-while= | final         |          1 |

#+latex: \vfill

Em todos os casos:
- Para dar continuidade, a condição deve ser verdadeira.

#+latex: \vfill\pause

_Reforço sobre a Programação Estruturada_

Como terminar o laço de repetição?
- Única forma: *a condição se tornar falsa*
- Uso do =break= quebra a programação estruturada

* Usos dos comandos de repetição

=for=
- Quantidade de repetições conhecidas de antemão
- O controle é inteiramente controlado pelo cabeçalho

=while= e =do-while=
- Repetir enquanto uma condição for verdadeira
- O bloco de comandos altera variáveis utilizadas na condição
  - Deve-se prever que a condição se torne falsa

#+latex: \pause
- O bloco deve ser sempre executado pelo menos 1\times \rightarrow =do-while=
- O bloco pode não ser executado nem uma vez \rightarrow =while=

* Exercício #1 (Taxa de Crescimento)

Refazer com =do-while= ou =while=.

#+latex: \vfill

- O Brasil, com 214 milhões de habitantes, cresce a uma taxa anual de
  1.34% enquanto os Estados Unidos com 332 milhões crescem a uma taxa
  anual de 1.09%.
- Calcule o número de anos que levará para o Brasil ultrapassar os
  Estados Unidos em número de habitantes, considerando-se que a cada
  ano a taxa dos Estados Unidos diminua em 0.1%. A taxa nunca fica
  negativa, no máximo a população permanece a mesma.
- Resposta esperada: ??? anos
