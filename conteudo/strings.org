# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Strings ou Arranjos de Caracteres}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |
* Sumário

- Arranjos de caracteres ou /strings/
  - Motivação
  - Função =getchar=
  - Uso de =printf= com /strings/
  - Como ler /strings/?
    - Problema do =gets= e do =scanf=
    - Uso do =fgets=
  - Manuseio de /strings/: exemplo da cópia
  - Funções para manusear /strings/ com a biblioteca =string.h=
    - =strcpy=
    - =strcat=
    - =strlen=
    - =strcmp=
- Exercício #1 (Implementação de código de manuseio)
- Exercício #2 (Procura por caractere)
- Exercício #3 (Procura por /string/)

* Motivação

#+begin_center
Ler o nome de 30 alunos e a nota correspondente.

Calcular e informar a média da turma, seguido dos nomes dos alunos com
nota inferior à média da turma.
#+end_center

#+latex: \pause\vfill

*Como armazenar os nomes?*

#+latex: \vfill

- Nome: arranjo de caracteres ou /string/
- Na linguagem C
  - Um caractere: =char= (guarda apenas um caractere)
  - Um (ou uma) /string/: arranjo de caracteres (mais de um)

* Como ler um caractere?

Usar a função =scanf=
- Um espaço em branco no formatador \to remover espaços em branco
- Espaço em branco, caractere de tabulação, quebras de linha

#+begin_src C
char caractere;
scanf(" %c", &caractere);
#+end_src

#+latex: \vfill\pause

Usar a função =getchar()=
- Uma função específica para leitura de caracteres

#+begin_src C
char caractere;
caractere = getchar();
#+end_src

* Funcionamento da função =getchar()=

Ler um caractere com =a16-getchar.c=
#+BEGIN_SRC C :tangle e/a16-getchar.c
#include <stdio.h>
int main (){
  char caractere;
  printf("Forneça um caractere: ");
  caractere = getchar();
  printf("O caractere digitado: ->[%c]<-\n", caractere);
  return 0;
}
#+END_SRC

#+latex: \vfill\pause

Ler vários caracteres, um por um, com =a16-getchar-varios.c=

#+BEGIN_SRC C :tangle e/a16-getchar-varios.c
#include <stdio.h>
int main (){
  char caractere;
  do {
    printf("Forneça um caractere: ");
    caractere = getchar();
    printf("O caractere digitado: ->[%c]<-\n", caractere);
  }while(caractere != 'p');
  return 0;
}
#+END_SRC


#+latex: %\cortesia{../../../Algoritmos/Marcelo/aulas/aula12/aula12_slide_11.pdf}{Prof. Marcelo Walter}

* Uma =string= é um arranjo de caracteres

=Strings= é um arranjo de caracteres
- Ou ``cadeia de caracteres''
- Ou ``sequência de caracteres''
- Ou ``vetor de caracteres''

#+latex: \pause\vfill

Na linguagem C
- Tem um marcador de fim: '\0' (caractere ASCII da posição zero)
#+begin_src C
char caractere[9] = "Brasil";
#+end_src
#+attr_latex: :center nil
|   | 0 | 1 | 2 | 3 | 4 | 5 | 6  | 7 |  8 |
| / | < | < | < | < | < | < | <  | < | <> |
|---+---+---+---+---+---+---+----+---+----|
|   | B | r | a | s | i | l | \0 |   |    |
|---+---+---+---+---+---+---+----+---+----|

#+latex: \pause\vfill

- Toda =string= é um vetor de caracteres
- Mas /nem todo vetor de caracteres é uma string/ \\
  \to Pode não apresentar o marcador de fim

#+latex: \pause\vfill

*Literais strings* são representadas sempre por aspas duplas

Assim, "A" e 'A' são coisas diferentes!
- "A" é um vetor de 2 caracteres; 'A' é um caractere

* *Declaração* de /strings/ na Linguagem C

Na linguagem C
#+begin_src text
char <nome>[<capacidade>];
#+end_src
- nome: um identificador da variável =string=
- capacidade: um número natural não nulo

#+latex: \pause\vfill

#+begin_src C
char um_nome[9];
#+end_src
|   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |  8 |
| / | < | < | < | < | < | < | < | < | <> |
|---+---+---+---+---+---+---+---+---+----|
|   |   |   |   |   |   |   |   |   |    |
|---+---+---+---+---+---+---+---+---+----|

*A capacidade _deve sempre_ prever a inclusão do marcador de fim*

#+latex: \pause\vfill

Reflexão:
- Temos =dia_da_semana[?]= e =mes[?]=
  - Qual deve ser o tamanho da string?

* Inicialização de /strings/

Pode ser feitas de várias maneiras
#+begin_src C
char nome1[15] = "Ana";
char nome2[15] = {'A', 'n', 'a'};
#+end_src
Nestes casos, o compilador adiciona o '\0'.

#+latex: \pause

#+begin_src C
char nome3[] = "Ana";
#+end_src
Neste caso, o compilador aloca =nome3= com capacidade 4.
- Tamanho do literal string mais um

#+latex: \pause

#+begin_src C
char nome[4] = "Alba";
#+end_src
*Problema* \to é necessária uma capacidade de cinco caracteres

O código será compilado sem /warnings/ ou /errors/.

* Utilização de =printf= com /strings/

=a16-exemplo-printf.c=
#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-exemplo-printf.c
#include <stdio.h>
int main () {
  char str0[15] = "Ana";
  char str1[15] = {'A', 'n', 'a' };
  char str2[] = "Maria";
  char str3[3] = "Joao";
  printf("->[%s]<-->[%s]<-->[%s]<-->[%s]<-\n",
	 str0, str1, str2, str3);
  return 0;
}
#+END_SRC

#+latex: \pause

Execução do exemplo

#+begin_src shell :results output :dir e :exports both
gcc a16-exemplo-printf.c -o a16-exemplo-printf
./a16-exemplo-printf
#+end_src

#+RESULTS:
: ->[Ana]<-->[Ana]<-->[Maria]<-->[JoaMaria]<-

* Como ler /strings/?

Nunca use estas funções: =scanf= e =gets= @@latex:\pause\hfill@@ Por quê?

#+latex: \vfill

=a16-problema-scanf.c=
#+BEGIN_SRC C :tangle e/a16-problema-scanf.c
#include <stdio.h>
int main() {
  char minha_string[5];
  scanf("%s", minha_string);
  printf("->[%s]<-\n", minha_string);
  return 0;
}
#+END_SRC

#+latex: \pause

=a16-problema-get.c=
#+BEGIN_SRC C :tangle e/a16-problema-gets.c
#include <stdio.h>
int main() {
  char minha_string[5];
  gets(minha_string);
  printf("->[%s]<-\n", minha_string);
  return 0;
}
#+END_SRC

* Então como ler /strings/?

Vamos usar a função =fgets= que é segura!

#+BEGIN_EXAMPLE
fgets(string, tamanho_da_string, stdin);
#+END_EXAMPLE

#+latex: \pause
Exemplo

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-fgets.c
#include <stdio.h>
int main(){
  char minha_string[5];
  fgets(minha_string, 5, stdin);
  printf("->[%s]<-\n", minha_string);
  fgets(minha_string, 5, stdin);
  printf("->[%s]<-\n", minha_string);
  return 0;
}
#+END_SRC

* Impossível atribuição entre /strings/

Como =strings= não são um tipo em C, não se pode atribuir

#+begin_src C
char str1[15] = "Lucas";
char str2[10];
str2 = str1;
#+end_src

O código acima não compila. :(

* Vamos tentar mesmo assim

=a16-atribuir-strings.c=
#+BEGIN_SRC C :tangle e/a16-atribuir-strings.c
int main(){
  char str1[] = "Ana";
  char str2[15];
  str2 = str1;
  return 0;
}
#+END_SRC

#+latex: \pause

Compilar:

#+latex: {\small
#+begin_src shell :results output :dir e :exports both
gcc a16-atribuir-strings.c -o a16-atribuir-strings 2>&1 > x ; cat x
#+end_src

#+RESULTS:
: a16-atribuir-strings.c: In function ‘main’:
: a16-atribuir-strings.c:4:8: error: assignment to expression with array type
:    str2 = str1;
:         ^

#+latex: }

#+BEGIN_CENTER
Realmente não dá...

Mas como fazer para copiar uma string para outra, etc?
#+END_CENTER

* Manuseio de /strings/

Como já vimos...

Uma =string= é um arranjo de caracteres com marcador de fim
- Assim, podemos escrever um programa que a trate como arranjo

#+latex: \vfill\pause

#+begin_center
Escrever um programa que leia uma string =str_in= do teclado, copie para

outra string =str_out=, e imprima a segunda variável na tela.
#+end_center

* Cópia: Exemplo em =a16-manuseio-copia-1.c=

#+BEGIN_SRC C :tangle e/a16-manuseio-copia-1.c
/* Copiar uma string para outra, e imprimir a string copia
Entradas: string lida do teclado
Saidas: copia da string lida e impressao na tela */
#include<stdio.h>
#define TAMSTRING 30
int main()
{
  char str_in[TAMSTRING], str_out[TAMSTRING];
  int cont = 0; // contador para caracteres das strings
  printf("Entre o texto: ");
  fgets(str_in, TAMSTRING, stdin);
  printf("String lida foi ->[%s]<-\n", str_in);
  // varre a string lida ate achar '\0'
  while (str_in[cont] != '\0') {
    str_out[cont] = str_in[cont];
    cont++;
  }
  printf("->[%s]<-\n", str_out);
  return 0;
}
#+END_SRC

#+BEGIN_CENTER
Vejamos o problema!
#+END_CENTER

* Cópia: Melhora em =a16-manuseio-copia-2.c=

#+BEGIN_CENTER
Faltava o =\0= para concluir a string.
#+END_CENTER

#+BEGIN_SRC C :tangle e/a16-manuseio-copia-2.c
/* Copiar uma string para outra, e imprimir a string copia
Entradas: string lida do teclado
Saidas: copia da string lida e impressao na tela */
#include<stdio.h>
#define TAMSTRING 30
int main()
{
  char str_in[TAMSTRING], str_out[TAMSTRING];
  int cont = 0; // contador para caracteres das strings
  printf("Entre o texto: ");
  fgets(str_in, TAMSTRING, stdin);
  printf("String lida foi ->[%s]<-\n", str_in);
  // varre a string lida ate achar '\0'
  while (str_in[cont] != '\0') {
    str_out[cont] = str_in[cont];
    cont++;
  }
  str_out[cont]='\0'; //<--- Veja a correção AQUI
  printf("->[%s]<-\n", str_out);
  return 0;
}
#+END_SRC

* Funções para manuseio de /strings/ oriundas de =string.h=

Biblioteca =string.h=
#+begin_src C
#include <string.h>
#+end_src

#+latex: \vfill

Funções disponíveis (entre muitas outras, veja =man string.h=)
- Cópia de strings: =strcpy=
- Concatenação de strings: =strcat=
- Descobrir o tamanho de uma string: =strlen=
- Comparar duas strings: =strcmp=

* Função =strcpy= (destino, origem) ~a16-exemplo-strcpy.c~

Copia o conteúdo da variável =origem= para a variável =destino=
- As variáveis =origem= e =destino= não podem se sobrepor
- A variável =destino= tem que ser grande o suficiente

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-exemplo-strcpy.c
#include <stdio.h>
#include <string.h>
#define TAMANHO 10
int main() {
  char origem[TAMANHO];
  char destino[TAMANHO];
  printf("Forneça um nome de até %d caracteres: ", TAMANHO);
  fgets(origem, TAMANHO, stdin);
  strcpy(destino, origem); // <- AQUI
  printf("destino ->[%s]<-\n", destino);
  return 0;
}
#+END_SRC

* Função =strcat= (destino, origem) ~a16-exemplo-strcat.c~

Concatena o conteúdo da variável =origem= no final da variável =destino=
- As variáveis =origem= e =destino= não podem se sobrepor
- A variável =destino= tem que ser grande o suficiente

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-exemplo-strcat.c
#include <stdio.h>
#include <string.h>
#define TAMANHO 10
int main() {
  char origem[TAMANHO];
  char destino[2*TAMANHO];
  printf("Forneça um nome de até %d caracteres: ", TAMANHO);
  fgets(origem, TAMANHO, stdin);
  printf("Forneça outro nome de até %d caracteres: ", TAMANHO);
  fgets(destino, TAMANHO, stdin);
  strcat(destino, origem); // <- AQUI
  printf("destino ->[%s]<-\n", destino);
  return 0;
}
#+END_SRC

* Função =strlen= (string) ~a16-exemplo-strlen.c~

Retorna o tamanho da =string=, sem contar o '\0'

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-exemplo-strlen.c
#include <stdio.h>
#include <string.h>
#define TAMANHO 100
int main() {
  char origem[TAMANHO];
  int tamanho;
  printf("Forneça um nome de até %d caracteres: ", TAMANHO);
  fgets(origem, TAMANHO, stdin);
  tamanho = strlen(origem); // <- AQUI
  printf("->[%s]<- com %d caracteres (bytes)\n",
	 origem, tamanho);
  return 0;
}
#+END_SRC

* Função =strcmp= (s1, s2) \to =cmp= indica comparação

Começa comparando o primeiro caractere das strings =s1= e =s2=.  Se
iguais, continua a comparação dos caracteres seguintes até que
encontre alguma diferença (incluindo o marcador de fim).

#+latex: \pause

O valor de retorno:
- Se caractere de =s1= é maior que =s2=, retorna um valor maior que zero
- Se caractere de =s1= é menor que =s2=, retorna um valor menor que zero
- Se iguais, retorna zero

#+latex: \vfill\pause

Usamos os valores ASCII
- Lembrando que maiúsculas vem primeiro que minúsculas

* Exemplo de uso de =strcmp= em ~a16-exemplo-strcmp.c~

#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-exemplo-strcmp.c
/* Programa que le um par de string, comparando cada par */
#include <stdio.h>
#include <string.h>
#define TAMANHO 40
int main() {
  char string_primeiro[TAMANHO];
  char string_segundo[TAMANHO];
  printf("Forneca um texto: ");
  fgets(string_primeiro, TAMANHO, stdin);
  printf("Forneca um texto: ");
  fgets(string_segundo, TAMANHO, stdin);
  printf("Resultado da comparacao de %s com %s: %d\n\n",
	 string_primeiro, string_segundo,
	 strcmp(string_primeiro, string_segundo) );
  return 0;
}
#+END_SRC

#+latex: \vspace{-0.3cm}
#+BEGIN_CENTER
Teste com /Banana/ e /Abacate/, por exemplo.
#+END_CENTER

* Funções um pouco mais seguras

Todas as funções de manuseio tem problemas...
1. Elas não controlam se o destino tem tamanho adequado
2. Elas copiam da origem até o =\0=

#+latex: \vfill

A solução para 2. é usar alternativas com limites explícitos

#+BEGIN_CENTER
=strncpy=

=strncat=

=strncmp=
#+END_CENTER

* Até agora, usamos fgets, mas vejamos um ``problema''

~a16-fgets-2.c~
#+BEGIN_SRC C :tangle e/a16-fgets-2.c
#include <stdio.h>
int main(){
  char str[5];
  fgets(str, 5, stdin);
  printf("->[%s]<-\n", str);
  return 0;
}
#+END_SRC

#+BEGIN_CENTER
Como resolver?
#+END_CENTER

#+latex: \pause

~a16-fgets-3.c~
#+attr_latex: :options fontsize=\normalsize
#+BEGIN_SRC C :tangle e/a16-fgets-3.c
#include <stdio.h>
int main(){
  char str[5];
  fgets(str, 5, stdin);
  str[strlen(str)-1] = '\0'; // <- AQUI
  printf("->[%s]<-\n", str);
  return 0;
}
#+END_SRC

* Exercício #1 (Implementação de código de manuseio)

Implemente, empregando o comando =for=, a funcionalidade destas funções
- =strcpy=
- =strcat=
- =strlen=
- =strcmp=

* Exercício #2 (Procura por caractere)

Escreva um programa que lê um texto contendo até MAXIMO caracteres,
depois lê 1 caractere e informa a primeira posição do texto onde este
caractere ocorre (ou que não existe tal caractere no texto).

* Exercício #3 (Procura por /string/)

Escreva um programa que lê um texto contendo até MAXIMO caracteres,
depois lê uma /string/ com até TAMANHO caracteres, e informa a posição
do texto onde esta /string/ ocorre (ou que não existe tal caractere no
texto). Caso a /string/ apareça mais de uma vez, todas as ocorrências
devem ser informadas.
