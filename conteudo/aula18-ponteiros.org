# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{systeme}

#+latex: \newcommand{\mytitle}{Ponteiros e Passagem de Arranjos}
#+latex: \mytitleslide

* Sumário

Ponteiros
- Aritmética de ponteiros (/lembrete/)

Ponteiros e vetores
- Semelhanças (Exemplo #2)
- Diferenças (Exemplo #3 e Exemplo #4)

Passagem de vetores como referência
- Exemplo #5 (leitura de valores)
- Exemplo #6 (manipulação de string)
- Exemplo #7 (copia invertido)
- Exemplo #8 (função retorna ponteiro)

Passagem de arranjos multidimensionais como referências
- Como matrizes são armazenadas na memória
- Endereçamento de células na matrizes
- Como calcular os endereços com ponteiros

* Aritmética de ponteiros (/lembrete/)

O valor considerado é o tamanho do tipo do ponteiro. Exemplo, ao somar 1
no ponteiro, será somado o tamanho do tipo do ponteiro (4 se ~int~).

#+begin_src C
int aux;
int *p;
p = &aux;
p = p + 1; // arimética de ponteiros
#+end_src

#+RESULTS:

Representação gráfica da memória virtual
| / | <> | >   | >   | >   | >   | >   |   > |   > | >   | >   |
|   |  0 | ... | 450 | 451 | 452 | 453 | 454 | 455 | ... | 2^{64} |
|---+----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
|   |    |     | XXX | XXX | XXX | XXX |     |     |     |     |
|---+----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
(assumindo que =aux= foi alocado para o endereço 450--453, 4 bytes)

* Exemplo #1 ~a28-aritmetica.c~                                      :noexport:

#+BEGIN_SRC C :tangle a28-aritmetica.c
#include <stdio.h>
int main() {
  int i, *pi1, *pi2;
  double d, *pd1, *pd2;
  char c, *pc1, *pc2;
  c = 'A';
  d = 5.423;
  i = -20;
  pi1 = &i;
  pi2 = pi1 + 1; // incrementa o espaco ocupado por um inteiro (4 bytes)
  pd1 = &d;
  pd2 = pd1 + 2; // incrementa duas vezes o espaco ocupado por um double (2*8 bytes)
  pc1 = &c;
  pc2 = pc1 - 1; // decrementa o espaco ocupado por um char (1 byte)
  printf("Resultados em hexadecimal\n");
  printf("pi1: %p, pi2: %p\n", pi1, pi2);
  printf("pd1: %p, pd2: %p\n", pd1, pd2);
  printf("pc1: %p, pc2: %p\n\n", pc1, pc2);
  printf("Resultados em decimal\n");
  printf("pi1: %d, pi2: %d\n", pi1, pi2);
  printf("pd1: %d, pd2: %d\n", pd1, pd2);
  printf("pc1: %d, pc2: %d\n", pc1, pc2);
  return 0;
}
#+END_SRC
* Ponteiros e vetores: *semelhanças*

- O nome de um vetor corresponde a um ponteiro constante
  - É um ponteiro fixo no primeiro elemento

#+latex: \pause

Lembrando de _como é com vetores_
#+begin_src C
int vetor[6], i = 3;
vetor[i] = 20;
#+end_src
| / |        | <> | >   |  > |  > |  > |  > |  > |  > | >   | >   |
|   | End.   |  0 | ... | 40 | 44 | 48 | 52 | 56 | 60 | ... | 2^{64} |
|---+--------+----+-----+----+----+----+----+----+----+-----+-----|
|   | Índice |    |     |  0 |  1 |  2 |  3 |  4 |  5 |     |     |
|---+--------+----+-----+----+----+----+----+----+----+-----+-----|
|   | Valor  |    |     |    |    |    | 20 |    |    |     |     |
|---+--------+----+-----+----+----+----+----+----+----+-----+-----|
(assumindo que =vetor= foi alocado para o endereço 40--64, 24 bytes)

#+latex: \vfill\pause

_Como é com ponteiros_
#+begin_src C
int vetor[6];
int *p = vetor, i = 3;
*(vetor+i) = 20;
#+end_src
(na declaração de =p=, o fazemos apontar para o início de vetor) \\
(assumir a aritmética de ponteiros e o operador =*= de acesso)

* Exemplo #2 ~a28-semelhancas.c~

#+BEGIN_SRC C :tangle a28-semelhancas.c
#include <stdio.h>
#define TAM 2
int main()
{
  int v[TAM]; //alocação de vetor de inteiros de tamanho TAM
  int i;

  printf("Leitura com acesso tipo ponteiro\n");
  for (i = 0; i < TAM; i++)
    scanf("%d",v+i);       // ja eh ponteiro (sem o "e" comercial)

  printf("Impressao com acesso tipo ponteiro\n");
  for (i = 0; i < TAM; i++)
    printf("%d ",*(v+i)); //acessamos o valor apontado por v+i
  printf("\n");

  printf("Impressao com acesso tipo vetor\n");
  for (i = 0; i < TAM; i++)
    printf("%d ",v[i]);   //acessamos a posição i de v
  printf("\n");
  return 0;
}
#+END_SRC
* Ponteiros e vetores: *diferenças* (na _declaração_ unicamente)

Declaração de vetor
- O compilador gera código para reservar um bloco de memória
- Capacidade máxima deve ser conhecida em tempo de compilação
  #+begin_src C
  int vetor[6] = {0}; // com inicialização opcional
  #+end_src
- O início do vetor não pode mudar de valor, somente o conteúdo

#+latex: \pause

Declaração de ponteiro
- O compilador aloca o espaço ocupado pelo ponteiro
- O ponteiro pode mudar de valor com atribuição

Exemplo
#+begin_src C
int vetor[6] = {1, 2, 3, 6, 7, 9};
int *p;

p = vetor; //válido, o p apontará para o início de vetor
vetor = p; //inválido, o "vetor" não pode mudar de valor
           //ainda que o conteúdo de vetor[índice] possa
#+end_src

* Exemplo #3 ~a28-diferencas.c~

#+BEGIN_SRC C :tangle a28-diferencas.c
#include <stdio.h>
#define TAM 3
int main() {

  int vetor[TAM] = {1,2,3};
  int *p;
  p = vetor; //operação válida. Atribui a p o endereço do primeiro elemento de v
  vetor = p; //operação inválida (pois vetor aponta para um endereço fixo)

  return 0;
}
#+END_SRC

#+latex: \pause

Compilando para ver *error*

#+begin_src shell :results output :exports both
gcc a28-diferencas.c 2> x; cat x
#+end_src

#+RESULTS:
: a28-diferencas.c: In function ‘main’:
: a28-diferencas.c:8:9: error: assignment to expression with array type
:     8 |   vetor = p; //operação inválida (pois vetor aponta para um endereço fixo)
:       |         ^

* Exemplo #4 ~a28-strings.c~

Strings são vetores de caracteres.

#+BEGIN_SRC C :tangle a28-strings.c :results output :exports both
#include <stdio.h>
int main() {
  char str[80] = "Alpha Centauri";
  char *p1;

  //atribui à p1 o endereço do primeiro elemento de str
  p1 = str;

  //imprimir o mesmo elementos com dois atalhos
  printf("[%c] = [%c]\n", str[0], *p1);

  // str[4] ou *(p1+4) acessam o 5o caractere (elemento) de str
  printf("[%c] = [%c]\n", str[4], *(p1+4));

  return 0;
}
#+END_SRC

#+RESULTS:
: [A] = [A]
: [a] = [a]

* Resumo: Arranjos são como se fossem ponteiros!

#+begin_center
Uma variável arranjo é um ponteiro fixo.
#+end_center

#+latex: \pause

- São sempre passados por referência (um caminho de acesso)
- Alterações dentro da função alteram o vetor passado como parâmetro
  #+begin_src C
  void funcao1 (int vetor[]) {
    vetor[3] = 10;
  }
  void funcao2 (int *vetor) {
    *(vetor + 3) = 10;
  }
  #+end_src
#+latex: \pause
- Apenas o endereço do primeiro elemento é passado
  #+begin_src C
  int main() {
    int meu_vetor[3];
    funcao1(meu_vetor);
    funcao2(&meu_vetor[0]);
    return 0;
  }
  #+end_src
#+latex: \pause
- Devemos sempre passar a capacidade do vetor em outro argumento
  #+begin_src C
  void funcao3(int vetor[], int capacidade) { /* implementação */ }
  void funcao4(int *vetor, int capacidade) { /* implementação */ }
  #+end_src

* Exemplo #5 ~a28-levetor.c~ (leitura de valores)

Faça uma função ~le_vetor~ de floats que receba como parâmetro o vetor a
ser preenchido e o número de elementos a serem lidos:

#+BEGIN_SRC C :tangle a28-levetor.c :main no
#include <stdio.h>
#define TAM 3

void le_vetor(float vetor[], int num_vet) { //leitura de um vetor de floats
  int i; // variável local, para auxiliar leitura
  printf("Entre os %d valores do vetor, separados por espaços\n",num_vet);
  for (i = 0; i < num_vet; i++)
    scanf("%f",&vetor[i]);
  return;
}
#+END_SRC

#+latex: \pause

#+BEGIN_SRC C :tangle a28-levetor.c :main no
int main() {
  int i; //contador
  float vec[TAM];
  printf("leitura de %d elementos \n", TAM);
  le_vetor(vec, TAM);  //<-- veja a chamada da função
  for (i = 0; i < TAM; i++) // escrita do vetor
    printf("%.2f ", vec[i]);
  printf("\n");
  return 0;
}
#+END_SRC
* Exemplo #6 ~a28-upper.c~ (manipulação de /string/)

Faça uma função ~void~ que receba como parâmetro

uma string e converta todos seus caracteres para maiúsculas.

(veja que aqui não há necessida de informar a capacidade) \\
(sabemos que uma string termina pelo caractere =\0=)

#+BEGIN_SRC C :tangle a28-upper.c :main no
#include <stdio.h>
void nosso_upper (char str[])  {
  int i = 0; //contador inicializado na primeira posicao da string
  while(str[i] != '\0') {
    str[i] = toupper(str[i]);
    i++;
  }
}
#+END_SRC

#+latex: \pause

Uma segunda versão:

#+BEGIN_SRC C :tangle a28-upper.c :main no
void nosso_upper_v2 (char str[])  {
  while(*str != '\0'){
    ,*str = toupper(*str);
    str++;
  }
}
#+END_SRC
* Exemplo #7 ~a28-inverte.c~ (copia invertido)

Faça uma função ~void inverte(char* str1, char* str2)~, que copie
o conteúdo de str1 invertido (caracteres de trás para frente) em str2.

#+BEGIN_SRC C :tangle a28-inverte.c
#include <stdio.h>
#include <string.h>
#define TAM 20
void inverte(char* str1, char* str2);
int main() {
  char c1[TAM], c2[TAM];
  fgets(c1, TAM, stdin);
  c1[strlen(c1)-1] = '\0';
  inverte_texto(c1, c2);
  printf("[%s] -> [%s]\n", c1, c2);
  return 0;
}
#+END_SRC

#+latex: \pause

#+BEGIN_SRC C :tangle a28-inverte.c :main no
void inverte(char* str1, char* str2) {
  int i, n = strlen(str1);
  for (i = 0; i < n; i++)
    str2[i] = str1[n - 1 - i];
  str2[i] = '\0';
}
#+END_SRC
* Exemplo #8 ~a28-maior.c~ (ponteiro para maior)

#+BEGIN_CENTER
Uma função também pode retornar um ponteiro
#+END_CENTER

Escreva uma função em C que receba como parâmetro
um vetor de inteiros, e retorne um ponteiro apontando
para a posição do maior elemento do vetor

#+latex: \pause

#+BEGIN_SRC C :tangle a28-maior.c :main no
#include <stdio.h>
// função tipo ponteiro inteiro
int *maior(int vet[], int tamanho) {
  int i, *p = NULL; // índice e ponteiro de elemento do vetor
  p = vet;          // aponta para 1o elemento do vetor
  for (i = 0; i < tamanho; i++)
    if (vet[i] > *p)
      p = vet + i; // passa a apontar para o maior valor
  return p; // retorna o ponteiro
}
#+END_SRC

#+latex: \pause

#+BEGIN_SRC C :tangle a28-maior.c
int main() {
  int vet[] = {3, 1, 8, 4}, *m = NULL;
  m = maior (vet, 4);
  if (m)
    printf("O maior elemento é %d.\n", *m);
  return 0;
}
#+END_SRC

* Passagem de arranjos multidimensionais como referências

#+begin_center
_Objetivo_

Passagem de arranjos com mais de uma dimensão em C
#+end_center

Arranjos 1D (Vetores)
- Não havia necessidade de especificar a capacidade
  #+begin_src C
  void funcao(int v[]);
  #+end_src

#+latex: \pause

Arranjos kD (para k >= 2)
- Capacidade das dimensões deve estar presente na declaração
  - Salvo a primeira dimensão
- Existem outras alternativas (fora do plano da disciplina)

Exemplos
#+begin_src C
#define TAM1 10
#define TAM2 20
void funcao1 (float matriz[][TAM1]);
void funcao2 (int cubo[][TAM1][TAM2]);
#+end_src

* Armazenamento sequencial de arranjos 2D

Exemplo considerando A[2][4]
|-----+-----+-----+-----|
| 1,1 | 1,2 | 1,3 | 1,4 |
|-----+-----+-----+-----|
| 2,1 | 2,2 | 2,3 | 2,4 |
|-----+-----+-----+-----|
#+latex: \pause
Mapeamento por linha
|-----+-----+-----+-----+-----+-----+-----+-----|
| 1,1 | 1,2 | 1,3 | 1,4 | 2,1 | 2,2 | 2,3 | 2,4 |
|-----+-----+-----+-----+-----+-----+-----+-----|
Outro mapeamento na memória por coluna
|-----+-----+-----+-----+-----+-----+-----+-----|
| 1,1 | 2,1 | 1,2 | 2,2 | 1,3 | 2,3 | 1,4 | 2,4 |
|-----+-----+-----+-----+-----+-----+-----+-----|

#+latex: \pause\vfill

*Na Linguagem C, o armazenamento é por linha*
#+begin_src C
int valores[][3] = {2, 3, 5, 4, 8, 0}; // 2x3
#+end_src
Visão na memória desta matriz
| / | <> | >   |  > |  > |  > |  > |  > |  > | >   | >   |
|   |  0 | ... | 20 | 24 | 28 | 32 | 36 | 40 | ... | 2^{64} |
|---+----+-----+----+----+----+----+----+----+-----+-----|
|   |    |     |  2 |  3 |  5 |  4 |  8 |  0 |     |     |
|---+----+-----+----+----+----+----+----+----+-----+-----|
(assumindo que =valores= foi alocado para o endereço 20, 4 bytes)

* Endereçamento com aritmética de ponteiros

Como funciona o endereçamento com vetores?
#+attr_latex: :options fontsize=\large
#+begin_src C :results output :exports both
int vetor[4] = { 45, 34, 12, 78 };
int i = 2, *p;
p = vetor;
printf("[%d]\n", *(p + i));
#+end_src

#+RESULTS:
: [12]

#+latex: \pause

E para matrizes (armazenamento por linha), como funciona?
#+attr_latex: :options fontsize=\large
#+begin_src C :results output :exports both
#define COLUNAS 3
int matriz[][COLUNAS] = {2, 3, 5, 4, 8, 0}; // 2x3
int i = 1, j = 1, *p;
p = matriz;
printf("[%d]\n", *(p + i * COLUNAS + j));
#+end_src

#+RESULTS:
: [8]

Seleciona Linha: =i*COLUNAS= -- Seleciona Coluna: =j=

* Cálculo de endereços ~a29-endereco-matriz.c~

#+BEGIN_SRC C :tangle e/a29-endereco-matriz.c
#include <stdio.h>
#define LINHAS 2
#define COLUNAS 10
void imprime (int m[][COLUNAS]);
int main() {
  int M[LINHAS][COLUNAS] = { { 1,   2,  3,  4,  5,  6,  7,  8,  9, 10 },
                             { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 } };
  imprime(M);
  return 0;
}
#+END_SRC
#+latex: \pause
#+BEGIN_SRC C :tangle e/a29-endereco-matriz.c :main no
void imprime (int m[][COLUNAS]) {
  int i, j;
  for (i = 0; i < LINHAS; i++)
    for (j = 0; j < COLUNAS; j++)
      printf("matriz[%d][%d] = %d\n",
	     i, j,
	     ,*(m[0] + i * COLUNAS + j));
}
#+END_SRC
#+latex: \pause
Outra forma seria assim:
#+begin_src C
void imprime (int *m) { //... for ... for
   printf("...%d\n", *(m + i * COLUNAS + j));
}
#+end_src

* Exercício #1

Escreva um programa em C que: 1/ Para um matriz de ordem cinco,
preencher aleatoriamente com valores entre 10 e 20; 2/ Chame uma
função que receba uma matriz, a quantidade de linhas e colunas e troca
todos os elementos da diagonal principal por zero. Na implementação
desta função, usar ponteiro e o cálculo do endereço com aritmética de
ponteiros.

