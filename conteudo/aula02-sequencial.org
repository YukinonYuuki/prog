# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Estrutura de um Programa em C}
#+latex: \mytitleslide

* Listagem de tópicos abordados

Vamos abordar hoje

- Conceito de programa
- Algoritmo sequencial
- Estrutura de programa sequencial
- Programa C sequencial

* Organização simplificada de um computador

- Memória (principal e secundária)
- Unidade Central de Processamento (/Central Processing Unit/)
  - Unidade de Aritmética e Lógica
- Unidade de Entrada e Saída

#+latex: \pause\vfill

Programas transformam uma (ou mais) entrada(s) em saída(s)
  
* Linguagem de Programação                                         :noexport:

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula02/aula02_slide_17.pdf}{Prof. Marcelo Walter}

* Ambiente de Programação                                          :noexport:

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula02/aula02_slide_18.pdf}{Prof. Marcelo Walter}

#+latex: \pause

*Nota*: Mas pode-se utilizar qualquer editor de texto e compilador.

* Esqueleto de um Programa (vazio) escrito em C

#+BEGIN_SRC C :tangle e/programa-vazio.c
/* comentário inicial, descrevendo objetivos do programa */
#include<stdlib.h> // para usar comandos do sistema
#include<stdio.h> // para entrada e saída de dados
// outras bibliotecas necessárias
// outras declarações

int main() // função principal e obrigatória
{
  //declarações e comandos
  return 0; // para encerramento normal do programa
}
#+END_SRC

- Linhas com =#= são tratados pelo *pré-processador*

#+latex:% \cortesia{../../../Algoritmos/Claudio/Teorica/Aula02-algor-estrutprogr_slide_08.pdf}{Prof. Claudio Jung}

* Entrada (=scanf=) e saída (=printf=) de dados

Retomando o exemplo anterior

Algoritmo SomaDois
1. Ler A
2. Ler B
3. Soma <- A + B
4. Escrever Soma
5. Terminar

#+latex: \pause

Linguagem C   
- Para ``Ler'' (entrada de dados) empregamos a função =scanf()=
  - =scanf= \to escaneamento de dados formatados
- Para atribuição empregamos o operador '='
- Para ``Escrever'' (saída de dados) empregamos a função =printf()=
  - =printf= \to impressão na tela de dados formatados
  
* Codificação do projeto da soma

#+BEGIN_SRC C :tangle e/programa-soma2.c
/*calcula a soma de 2 valores inteiros lidos do teclado */
#include<stdio.h> // biblioteca com operações de entrada e saída
int main( )
{
  int val1, val2;       // declaração das variáveis de entrada
  int soma;             // declaração da variável resultante

  printf("Valor 1:\n"); // mensagem impressa na tela
  scanf("%d", &val1);   // leitura da informação digitada
  printf("Valor 2:\n");
  scanf("%d", &val2);
  soma = val1 + val2;   // armazena resultado em soma
  printf("Resultado da soma: %d\n", soma); // e mostra na tela
  return 0;             // encerra o programa de forma correta
}
#+END_SRC

* Variáveis

1. Representam locais na memória
   - Dados podem ser armazenados durante a execução de um programa
2. Precisam ser declaradas previamente
   - Devem ter uma especificação do tipo
3. Possuem um nome
   - É referenciada no código através deste nome

#+latex: \pause\vfill

Como registrar valores em uma variável?
#+begin_src C
int var;
var = 10;          // por atribuição
scanf("%d", &var); // por leitura da entrada-padrão (teclado)
#+end_src
     
* Escaneamento de dados formatados: a função =scanf()=

#+begin_src C
scanf("%d%f%lf%c", &var_int, &var_float, &var_double, &var_char);
#+end_src
- Entre aspas duplas, _especificadores de tipo_
  - Normalmente sem nada entre eles (como no exemplo acima)
- Depois, para cada especificador, o _endereço de uma variável_

#+latex: \vfill\pause

Lê da entrada padrão até que a tecla <enter> seja pressionada
1. Escanea as teclas lidas
2. Traduzindo-as para o tipo de dado
3. Conclui por registrar o valor traduzido na variável

* Especificadores de tipo com =scanf()= (exemplo)

| Especificador de tipo | Significado                               |
|-----------------------+-------------------------------------------|
| %d                    | Escaneamento para inteiro                 |
| %f                    | Escaneamento para ponto-flutuante simples |
| %lf                   | Escaneamento para ponto-flutuante duplo   |
| %c                    | Escaneamento para caractere               |

Existem muitos outros, olhar o manual do =printf()=.

#+latex: \vfill\pause

Exemplo
#+BEGIN_SRC C
#include<stdio.h> // biblioteca com operações de entrada e saída
int main( )
{
  int val1, val2;
  float real;
  char caractere;

  scanf("%d", &val1);
  scanf("%d%f", &val2, &real);
  scanf("%c", &caractere);
  return 0;
}
#+END_SRC

* Saída formatada: a função =printf()=

#+begin_src C :results output :exports both
int var_int = 10;
float var_float = 2.3;
double var_double = 3.29876;
char var_char = 'A';
printf("Um número inteiro: %d\n"
      "Um número ponto-flutuante: %f\n"
      "Um número ponto-flutuante duplo: %lf\n"
      "Um caractere: %c\n", var_int, var_float, var_double, var_char);
#+end_src

#+RESULTS:

#+latex: \vfill

- Texto entre aspas duplas, com _especificadores de tipo_
  - O conteúdo é mostrado tal qual, mas os valores das variáveis tomam
    lugar dos especificadores

- Os especificadores de tipo podem ser mais complexos
  - =printf("%9.2f", var_float)=

- Para ir mais longe, ler o manual do =printf= e do =scanf=
   - /aka/ =man printf=, or https://linux.die.net/man/3/printf
    
* Ilustração do tamanho do campo e precisão

#+latex_attr: :options :fontsize \tiny
#+BEGIN_SRC C :tangle e/teste-printf.c
//teste saida printf
#include <stdio.h>
int main( )
{
  float valor=99.7567892;
  printf("Valor com 9f   = [%9f]\n", valor);
  printf("Valor com 9.0f = [%9.0f]\n", valor);
  printf("Valor com 9.1f = [%9.1f]\n", valor);
  printf("Valor com 9.2f = [%9.2f]\n", valor);
  printf("Valor com 9.3f = [%9.3f]\n", valor);
  printf("Valor com 1.2f = [%1.2f]\n", valor);
  return 0;
}
#+END_SRC

#+latex: \vfill\pause

Compilando e executando (veja a saída também no terminal)

#+begin_src shell :results output :dir e :exports both
gcc teste-printf.c -o teste-printf
./teste-printf
#+end_src

#+RESULTS:
: Valor com 9f   = [99.756790]
: Valor com 9.0f = [      100]
: Valor com 9.1f = [     99.8]
: Valor com 9.2f = [    99.76]
: Valor com 9.3f = [   99.757]
: Valor com 1.2f = [99.76]

* O comando de atribuição

Comando de atribuição consiste em:
1. Um identificador de variável
2. O caractere '='.
3. Uma expressão

#+latex: \vfill
   
Exemplo
#+begin_src C
int var_int;
int var_dois = 2;

var_int = var_dois + 80 * 2; // <- este é o exemplo
#+end_src

#+latex: \vfill\pause

Outros dois exemplos
#+begin_src C
char sexo;
float valor;

sexo = 'F';          // <- exemplo 1
valor = 2.3 * 5 + 2; // <- exemplo 2
#+end_src

* Elementos léxicos: identificadores

Elementos empregados nos nomes de variáveis
- Letras, sendo sensível a maiúsculas e minúsculas
  - Identificadores 'var' e 'Var' são diferentes, por exemplo
- Dígitos: de 0 até 9
- O caractere sublinhado '_'

Regra para formação de identificadores
- Não pode começar com dígito
- Depois podemos ter qualquer outro elemento

* Elementos léxicos: símbolos e palavras-reservadas

Símbolos especiais
- Outros símbolos especiais: # /* “ . , ; .. ( ) { } : =

Palavras-reservadas devem ser em minúsculo
- São nomes reservados de comandos da linguagem
- Lista de palavras reservadas: auto break case char const continue
  default do double else enum extern float for if int long register
  return short signed sizeof static struct switch typedef union
  unsigned void volatile while.

* Elementos léxicos: comentários C99

Permite documentar o código-fonte do programa
- Vejamos aquele exemplo anterior

#+BEGIN_SRC C
/*calcula a soma de 2 valores inteiros lidos do teclado */
#include<stdio.h> // biblioteca com operações de entrada e saída
int main( )
{
  int val1, val2;       // declaração das variáveis de entrada
  int soma;             // declaração da variável resultante

  printf("Valor 1:\n"); // mensagem impressa na tela
  scanf("%d", &val1);   // leitura da informação digitada
  printf("Valor 2:\n");
  scanf("%d", &val2);
  soma = val1 + val2;   // armazena resultado em soma
  printf("Resultado da soma: %d\n", soma); // e mostra na tela
  return 0;             // encerra o programa de forma correta
}
#+END_SRC

Existem duas formas
- Multilinha, do @@latex:'/*' até o '*/'@@
- Uma linha, do '//' até o final da linha

* O pré-processador da linguagem C

Trata-se de um pré-processamento de diretivas simples
- São todos os comandos que começam com '#'
- O único que usaremos por enquanto
  - =#include= para incluir outros arquivos

#+latex: \pause\vfill

Usaremos o comando =#include= para incluir cabeçalhos de bibliotecas

| Cabeçalho | Descrição                       |
|-----------+---------------------------------|
| =stdio.h=   | Funções de entrada e saída      |
| =stdlib.h=  | Funções da biblioteca padrão    |
| =math.h=    | Funções matemáticas             |
| =system.h=  | Funções para acessar o sistema  |
| =string.h=  | Funções de manipulação de texto |

Por enquanto, usaremos apenas a =stdio.h=
- Dentro temos a implementação das funções =scanf()= e =printf()=
  - ``io'' de input/output (entrada/saída em pt-br)

* Exercício (resolvido)

Dado o preço de um produto em reais, converter este valor para o
equivalente em dólares. O programa deverá ler do teclado o preço do
produto e a taxa de conversão para o dólar. Hoje 1,00 USD equivale a
R$ 5,03 reais.

#+latex: \pause\vfill

Algoritmo ConversãoParaDolar

{ Calcula e conversão de um valor de Real para Dolar }

entradas: Preço, Taxa de conversão

saídas: Preço em Dolar
 
1. Obtém valor do preço
2. Obtém valor da taxa de conversão
3. Calcula o preço em dolar
4. Informa o preço em dolar
5. Terminar.

* Vamos melhorar o algoritmo

Algoritmo ConversãoParaDolar

{ Calcula e conversão de um valor de Real para Dolar }

entradas: Preço, Taxa

saídas: PreçoEmDolar

1. Ler Preço
2. Ler Taxa
3. PreçoEmDolar <- Preço * Taxa
4. Escrever PreçoEmDolar
5. Terminar.

* Implementação na Linguagem C

#+BEGIN_SRC C :tangle e/programa-conversao-real-dolar.c
/* Calcula e conversão de Real para Dolar */
#include <stdio.h> // biblioteca com operações de I/O
int main()
{
  float Preco, Taxa;          // Valores em real declarados float
  float PrecoEmDolar;         // tipo da variável resultante
  printf("Valor em real:\n"); // mensagem impressa na tela
  scanf("%f", &Preco);        // leitura da informação digitada
  printf("Taxa conversao :\n");
  scanf("%f", &Taxa);
  PrecoEmDolar = Preco *Taxa;
  printf("Preco em dolar: %f\n", PrecoEmDolar); // mostra
  return 0; // encerra o programa e retorna zero ao Sist Op
}
#+END_SRC

* Exercícios

#1

Calcular a comissão obtida por um vendedor em uma venda
efetuada. Escrever um algoritmo que lê o código de um vendedor, o
valor da venda efetuada em reais e o percentual da comissão sobre a
venda.  Fornecer na saída o número do vendedor e sua comissão em
reais.

#+latex: \vfill

#2

Fornecer a soma e o produto de três valores lidos do teclado.

#+latex: \vfill

#3

Calcular o preço a ser pago em uma loja, sendo informado o preço do
produto comprado e a quantidade de unidades adquiridas.

* Emacs setup                                                      :noexport:

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
(setq org-latex-minted-options '(("style" "Tango") ("bgcolor" "white") ("frame" "lines") ("linenos" "false") ("fontsize" "\\small")))
(setq org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

#+RESULTS:
| pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f |
