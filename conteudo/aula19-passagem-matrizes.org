# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{systeme}

#+latex: \newcommand{\mytitle}{Passagem de matrizes}
#+latex: \mytitleslide

* Sumário

Passagem de matrizes como parâmetro para funções
- Como matrizes são armazenadas na memória
- Endereçamento de células na matrizes
- Como calcular os endereços com ponteiros

* Matrizes e Parâmetros

#+begin_center
_Objetivo_

Passagem de arranjos com mais de uma dimensão em C
#+end_center

Arranjos 1D (Vetores)
- Não havia necessidade de especificar a capacidade
  #+begin_src C
  void funcao(int v[]);
  #+end_src

#+latex: \pause

Arranjos kD (para k >= 2)
- Capacidade das dimensões deve estar presente na declaração
  - Salvo a primeira dimensão
- Existem outras alternativas (fora do plano da disciplina)

Exemplos
#+begin_src C
#define TAM1 10
#define TAM2 20
void funcao1 (float matriz[][TAM1]);
void funcao2 (int cubo[][TAM1][TAM2]);
#+end_src

* Armazenamento de matrizes na memória

#+latex: \cortesia{../../../Algoritmos/Mara/Teoricas/Aula19-Ponteiros2_v3_slide_14.pdf}{Prof. Mara Abel}

* Endereçamento (por linha e por coluna) de células em 2D

Exemplo considerando A[2][4]
|-----+-----+-----+-----|
| 1,1 | 1,2 | 1,3 | 1,4 |
|-----+-----+-----+-----|
| 2,1 | 2,2 | 2,3 | 2,4 |
|-----+-----+-----+-----|

#+latex: \pause

Memória é linear: mapeamento *por linha*
|-----+-----+-----+-----+-----+-----+-----+-----|
| 1,1 | 1,2 | 1,3 | 1,4 | 2,1 | 2,2 | 2,3 | 2,4 |
|-----+-----+-----+-----+-----+-----+-----+-----|

#+latex: \pause

Outro mapeamento na memória *por coluna*
|-----+-----+-----+-----+-----+-----+-----+-----|
| 1,1 | 2,1 | 1,2 | 2,2 | 1,3 | 2,3 | 1,4 | 2,4 |
|-----+-----+-----+-----+-----+-----+-----+-----|

* Equação de endereçamento

  #+begin_center
  matriz A, tamanho $n_1 * n_2$ \\
  $A[i_1][i_2]$ \\
  $e = base + (i_1 * n_2 + i_2) * w$
  #+end_center
+ $base$: endereço relativo do arranjo na memória
+ $i_1 * n_2$ seleciona a linha
+ $i_2$ seleciona a coluna
+ $(i_1 * n_2 + i_2)$ define o deslocamento
+ $w$ tamanho do dado
#+latex: \vfill\pause

Exemplo considerando A[2][4]
|-----+-----+-----+-----|
| 1,1 | 1,2 | 1,3 | 1,4 |
|-----+-----+-----+-----|
| 2,1 | 2,2 | 2,3 | 2,4 |
|-----+-----+-----+-----|

* Cálculo de endereços ~a29-endereco-matriz.c~

Lembrete

$e = base + (i_1 * n_2 + i_2) * w$

#+BEGIN_SRC C :tangle e/a29-endereco-matriz.c
#include <stdio.h>
#define LINHAS 2
#define COLUNAS 10
void imprime (int m[][COLUNAS]);
int main() {
  int M[LINHAS][COLUNAS] = {
    { 1,   2,  3,  4,  5,  6,  7,  8,  9, 10 },
    { 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 } };
  imprime(M);
  return 0;
}
#+END_SRC

#+latex: \pause

#+BEGIN_SRC C :tangle e/a29-endereco-matriz.c :main no
void imprime (int m[][COLUNAS]) {
  int i, j;
  for (i = 0; i < LINHAS; i++)
    for (j = 0; j < COLUNAS; j++)
      printf("matriz[%d][%d] = %d\n",
	     i, j,
	     ,*(m[0] + i * COLUNAS + j));
}
#+END_SRC
* Exercício #1

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula19/aula19_slide_19.pdf}{Prof. Marcelo Walter}

