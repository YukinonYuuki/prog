# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Comando iterativo =for=}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |
* Sumário

Laços iterativos (/loops/)
- Motivação com exemplos
- O comando =for=
- Estudos de caso

* Motivação #1

#+begin_center
Faça um programa que leia a média de um aluno e, baseado no valor
obtido, informe se o aluno está aprovado ou reprovado.  Considerar
como aprovado o aluno que obtiver média >= 6.0.
#+end_center

#+latex: \pause\vfill

Uma possível solução
#+begin_src text
Algoritmo UmConceito
{ Informa se um aluno foi ou não aprovado }
entrada: média
saída: "Aprovado" ou "Reprovado"
1. Ler Média
2. Se Média >= 6.0
     escrever "Aprovado"
   Senão
     escrever "Reprovado"
3. Terminar
#+end_src

* Motivação #2

#+begin_center
Como o anterior, mas assuma uma turma de 3 alunos.
#+end_center

#+latex: \pause\vfill
Uma possível solução
#+latex: {\scriptsize
#+begin_src text
Algoritmo AprovadoReprovado
{ Informa se alunos foram ou não aprovados }
entrada: n1, n2, n3, med1, med2, med3
saída: para cada aluno, "Aprovado" ou "Reprovado"
1. Ler todas as variáveis de entrada
2. Se med1 >= 6.0
     escrever n1, "Aprovado"
   Senão
     escrever n1, "Reprovado"
3. Se med2 >= 6.0
     escrever n2, "Aprovado"
   Senão
     escrever n2, "Reprovado"
4. Se med3 >= 6.0
     escrever n3, "Aprovado"
   Senão
     escrever n3, "Reprovado"
5. Terminar
#+end_src
#+latex: }

* Uma versão melhorada com menos variáveis

#+begin_src text
Algoritmo AprovadoReprovado
{ Informa se alunos foram ou não aprovados }
entrada: numero, media
saída: para cada aluno, "Aprovado" ou "Reprovado"
1. Ler numero, media
2. Se media >= 6.0
     escrever numero, "Aprovado"
   Senão
     escrever numero, "Reprovado"
3. Ler numero, media
4. Se media >= 6.0
     escrever numero, "Aprovado"
   Senão
     escrever numero, "Reprovado"
5. Ler numero, media
6. Se media >= 6.0
     escrever numero, "Aprovado"
   Senão
     escrever numero, "Reprovado"
7. Terminar
#+end_src

#+begin_center
O que podemos observar neste algoritmo?

*Repetição de passos idênticos*

(queremos repetir alguns passos várias vezes)
#+end_center

* Uma versão ainda melhor, com menos código!

#+begin_src text
Algoritmo AprovadoReprovado
{ Informa se alunos foram ou não aprovados }
entrada: quantidade_de_alunos, numero, media
saída: para cada aluno, "Aprovado" ou "Reprovado"
1. Ler quantidade_de_alunos
2. Repetir quantidade_de_alunos vezes
   2.1 Ler numero, media
   2.2 Se media >= 6.0
          escrever numero, "Aprovado"
       Senão
          escrever numero, "Reprovado"
3. Terminar
#+end_src

#+begin_center
Temos aí um ``mecanismo de repetição'' _estruturado_
#+end_center

* Laços estruturados de repetição

Objetivo
- Repetir um comando (ou um bloco de) um número finito de vezes

#+latex: \pause\vfill

Controle da repetição
- Contagem
  - Repetir uma determinada quantidade de vezes
- Teste com expressão lógica ou relacional
  - Repetir _enquanto_ uma condição não for atingida
  - Repetir _até_ uma condição ser atingida

#+latex: \pause\vfill

Comandos iterativos
- *para* / *for*
- *enquanto* / *while*
- *faça... enquanto* / *do-while*

* O comando =for=

Na linguagem C
#+begin_src C
for (/*lista de comandos*/; /*expressão lógica*/; /*lista de comandos*/) {
   // bloco de comandos
}
#+end_src
Exemplo
#+begin_src C
int i;
for (i = 0; i < 5; i++){
  printf("%d\n", i);
}
#+end_src

#+latex: \pause\vfill

Na linguagem de algoritmos
#+begin_src text
1. para(inicializações; condição; incremento/decrementos)
   1.1 comando #1
   1.2 comando #2
#+end_src

#+begin_center
Vamos ver como funciona o fluxograma...
#+end_center

* Detalhamento do comando =for=

#+begin_src C
for (/*#1*/; /*#2*/; /*#3*/) {
   // #4
   // #5
}
#+end_src

#1
- especificação do valor inicial de uma ou mais variáveis de controle
- executado apenas uma vez, antes da primeira execução do comando

#2
- expressão lógica de controle do laço
- verificado se é verdade antes de cada iteração

#3
- alteração das variáveis de controle do laço \\
  (incrementos ou decrementos)
- executado após os comandos do bloco

#4 e #5
- comandos do bloco, executados sempre
  - após #2 (se verdadeiro)
  - antes de #3

* Sintaxe do comando =for=

Um laço for com dois comandos na inicialização e no último termo

#+begin_src C
#define QUANTAS_VEZES 5
int i;
for (i = 0, j = 3; i < QUANTAS_VEZES; i++, j--){
  printf("%d %d\n", i, j);
}
#+end_src

Todas as expressões do comando =for= são opcionais.

#+latex: \vfill\pause

Variáveis de controle para o comando =for=
- O tipo é usualmente =int= (ou derivados, =long=, =long long=, =char=)
- Podem ser lidas no bloco
- Mas, normalmente, não as alteramos no bloc
  - Apenas no terceiro termo do =for=

* Voltando ao algoritmo motivacional -- Exemplo #1

#+begin_src text
Algoritmo AprovadoReprovado
{ Informa se alunos foram ou não aprovados }
entrada: quantidade_de_alunos, numero, media
intermediária: contador
saída: para cada aluno, "Aprovado" ou "Reprovado"
1. Ler quantidade_de_alunos
2. Para (contador = 1; contador <= quantidade_de_alunos; contador = contador + 1)
   2.1 Ler numero, media
   2.2 Se media >= 6.0
          escrever numero, "Aprovado"
       Senão
          escrever numero, "Reprovado"
3. Terminar
#+end_src

* Exemplo #1: Em C

=a07-for-aprovado-reprovado.c=
Com comando de incremento
- Do valor 1 até menor igual que 5

#+BEGIN_SRC C :tangle e/a07-for-aprovado-reprovado.c
// Determina se 5 alunos foram aprovados ou reprovados
#include <stdio.h>
int main() {
  int contador, numaluno;
  float media;
  // Controle de repetição: executará 5 vezes
  for(contador = 1; contador <= 5; contador++) {
    // Comandos a serem repetidos
    printf("Informe numero e nota do aluno %d: ", contador);
    scanf("%d", &numaluno);
    scanf("%f", &media);
    if (media >=6)
      printf("O aluno %d foi aprovado!\n", numaluno);
    else
      printf("O aluno %d for reprovado!\n", numaluno);
  }
  return 0;
}
#+END_SRC

* Exemplo #1: Em C (decremento)

=a07-for-aprovado-reprovado-dec.c=
Com comando de _decremento_
- Do valor 5 até o maior que 0

#+BEGIN_SRC C :tangle e/a07-for-aprovado-reprovado-dec.c
// Determina se 5 alunos foram aprovados ou reprovados
#include <stdio.h>
int main() {
  int contador, numaluno;
  float media;
  // Controle de repetição: executará 5 vezes
  for(contador = 5; contador > 0; contador--) {
    // Comandos a serem repetidos
    printf("Informe numero e nota do aluno %d: ", contador);
    scanf("%d", &numaluno);
    scanf("%f", &media);
    if (media >=6)
      printf("O aluno %d foi aprovado!\n", numaluno);
    else
      printf("O aluno %d for reprovado!\n", numaluno);
  }
  return 0;
}
#+END_SRC

* Exemplo #2 (enunciado)

#+BEGIN_CENTER
Faça um programa que imprima, dentro de um

intervalo, todos os números pares.
#+END_CENTER

#+latex: \pause\vfill

Planejamento
- Entradas?
  - Validação da entrada
- Saídas?
- Processamento

* Exemplo #2 (código)

=a07-pares.c=
Perceba o incremento de 2 em 2.

#+BEGIN_SRC C :tangle e/a07-pares.c
// Imprime numeros pares de um intervalo dado
// garante que o primeiro nro é menor do que o segundo
#include <stdio.h>
int main() {
  int val1, val2, inic, fim, controle;
  printf("Informe 2 numeros naturais: ");
  scanf("%d%d", &val1, &val2);
  if (val1 > val2){
    inic = val2; fim = val1;
  }else{
    inic = val1; fim = val2;
  }
  if (inic%2)
    inic = inic + 1; // gera seq apenas com nros pares!
  for ( controle = inic; controle <= fim; controle = controle+2)
    printf("%d ", controle);
  printf("\n");
  return 0;
}
#+END_SRC

* Vocês lembram da tabela ASCII?

#+latex: \cortesia{../../../Algoritmos/Marcelo/aulas/aula07/aula07_slide_29.pdf}{Prof. Marcelo Walter}

* Tabela ASCII (mais completa)

[[./img/asciifull.jpg]]

#+attr_latex: :width .5\linewidth
[[./img/extend.jpg]]

* Exemplo #3 (enunciado)

#+BEGIN_CENTER
Faça um programa que imprima a tabela ASCII de =A= até =z=,

mostrando o caractere em bases octal, decimal e hexadecimal.
#+END_CENTER

#+latex:\pause\vfill

=a07-ascii.c=
#+BEGIN_SRC C :tangle e/a07-ascii.c
#include <stdio.h>
int main() {
  char letra;
  for (letra = 'A'; letra <= 'z'; letra++)
    printf("[%c] %03o %03d %03x\n", letra, letra, letra, letra);
  return 0;
}
#+END_SRC

#+latex: \vfill\pause

Qual o valor da variável ``letra'' antes no comando =return 0;=?

#+latex: \vfill\pause

=a07-ascii-v2.c=
#+BEGIN_SRC C :tangle e/a07-ascii-v2.c
#include <stdio.h>
int main() {
  char letra;
  for (letra = 'A'; letra <= 'z'; letra++)
    printf("[%c] %03o %03d %03x\n", letra, letra, letra, letra);
  printf("O laço terminou. O valor da letra é:\n"
	 "[%c] %03o %03d %03x\n", letra, letra, letra, letra);
  return 0;
}
#+END_SRC

* Exemplo #4 (enunciado)

#+begin_center
Calcular a idade média de um grupo de pessoas
#+end_center

#+latex: \pause\vfill

Estratégia com uma variável de _acumulação_
- Recebe um valor inicial (tipicamente o valor zero)
- Acumulamos periodicamente valores nela

#+latex: \pause\vfill
=a07-idades.c=
#+BEGIN_SRC C :tangle e/a07-idades.c
// Calcula a idade média de 5 pessoas
# include <stdio.h>
int main () {
  int soma_idades /* o acumulador */, idade, contador;
  float media_idades; // variável de saída
  soma_idades = 0; // inicializa acumulador em 0
  for (contador = 1; contador <= 5; contador ++) {
    printf("informe idade [%d]: ", contador); // utiliza contador
    scanf ("%d", &idade);
    // vai acumulando idades lidas
    soma_idades = soma_idades + idade;
  }
  // cast, para resultado ser real
  media_idades = (float) soma_idades / 5;
  printf("A media das 5 idades lidas eh %.2f.\n", media_idades);
}
#+END_SRC

* Exemplo #5 (enunciado)

#+begin_center
Calcular a idade média de um grupo de n pessoas, onde n é conhecido,
informando quantas pessoas do grupo tem idade inferior a 18 anos
#+end_center
#+latex: \vfill\pause
Estratégia com variável de _contagem_ (inicia com zero, incrementa de um)
#+latex: \vfill\pause
=a07-idades-18.c=
#+latex: {\scriptsize
#+BEGIN_SRC C :tangle e/a07-idades-18.c
/* Calcula a idade média de 5 pessoas e conta menores de idade do grupo: */
# include <stdio.h>
int main () {
  int soma_idades, idade, contador, conta_menos_de_18;
  float media_idades;
  soma_idades = 0;       // inicializa acumulador em 0
  conta_menos_de_18 = 0; // inicializa contador em 0
  for (contador = 1; contador <= 5; contador ++) {
    printf("informe idade [%d]: ", contador);
    scanf ("%d", &idade);
    if (idade < 18)
      conta_menos_de_18++; // incrementa 1 no contador
    // vai acumulando idades lidas
    soma_idades = soma_idades + idade;
  }
  // cast, para resultado ser real
  media_idades = (float) soma_idades/5;
  printf("A media das 5 idades lidas eh %.2f.\n", media_idades);
  printf("Existem %d pessoas menores de 18 anos.\n", conta_menos_de_18);
  return 0;
}
#+END_SRC
#+latex: }
* Reflexão sobre valores fixos no código

#+begin_center
Nos problemas anteriores, o que temos que alterar no

programa para a leitura de uma quantidade diferente de

valores, ao invés de sempre 5?
#+end_center

Vamos reforçar a importância do uso de contantes
- Uso do =#define= (como já visto na aula sobre tipos)
- O nome da constante deve estar integralmente em maiúsculas

#+begin_src C
#define NUMPESSOAS 5
#+end_src

* Exemplo #6 (código)

#+BEGIN_SRC C :tangle e/a07-idades-contante.c
// Calcula a idade média de NUMPESSOAS pessoas
#include <stdio.h>
#define NUMPESSOAS 5
int main () {
  int soma_idades, idade, contador;
  float media_idades;
  soma_idades = 0; // inicializa acumulador em 0
  for (contador = 1; contador <= NUMPESSOAS; contador ++) {
    printf("informe idade [%d]: ", contador); // utiliza contador
    scanf ("%d", &idade);
    // vai acumulando idades lidas
    soma_idades = soma_idades + idade;
  }
  // cast, para resultado ser real
  media_idades = (float) soma_idades / NUMPESSOAS;
  printf("A media das %d idades lidas eh %.2f.\n", NUMPESSOAS, media_idades);
}
#+END_SRC
* Dúvidas?

#+BEGIN_CENTER
Alguma dúvida?

Hora de ver coisas /off-the-record/ com o comando =for=.
#+END_CENTER

* Exercício #1 (Fatorial)

Utilizando o comando iterativo for, faça um algoritmo / programa em C
que calcule o fatorial de um número inteiro positivo informado.

#+latex: \pause\vfill

Como calcular o fatorial de um número?

Regra geral
  - n! = n\times(n-1)! para n > 0
  - n! = 1 para n == 0

Ou seja
- Fatorial de n é n\times(n-1)\times(n-2)\times...\times2\times1

* Exercício #2 (Fibonacci)

Faça um algoritmo e o programa em C correspondente que leia um valor
inteiro e informe o número equivalente de termos da Série de
Fibonacci.

#+latex: \pause\vfill

Entendendo a sequência de fibonacci e a estratégia

Sugestão de video

https://www.youtube.com/watch?v=eVbOxWVC_GY

Usar o comando =for=






