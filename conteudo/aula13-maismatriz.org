# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Algoritmos
#+Subtitle: *INF01202*
#+Author: Prof. Lucas Mello Schnorr
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS: title:nil H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{org-babel.tex}

#+latex: \newcommand{\mytitle}{Estudos de Caso com Matrizes}
#+latex: \mytitleslide

* Configuração                                                     :noexport:

#+BEGIN_SRC emacs-lisp
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-minted-options
       '(("frame" "lines")
         ("fontsize" "\\scriptsize")))
#+END_SRC

#+RESULTS:
| frame    | lines       |
| fontsize | \scriptsize |
* Sumário

Revisão

Estudos de caso
- #1 (turma, nome de alunos, suas notas, média e conceito)
- #2 (matriz esparsa para condensada)
- #3 (permutação de palavra)
- #4 (percorrimentos em matrizes)
  - #4.1 (diagonal)

Exercícios
- #4 (percorrimentos em matrizes)
  - #4.2 (diferentes formas geométricas)
- #5 (multiplicação de matrizes)

Desafio
- Campo minado

* Revisão Matriz -- Caso geral, multidimensional

#+begin_center
Temos que armazenar notas de alunos de turmas e escolas diferentes.

Temos 6 escolas; cada uma com 2 turmas;

cada uma com 10 alunos; cada um com 5 notas.
#+end_center

#+begin_src C
float n1[5];          // Vetor (arranjo 1D): 5 notas
float n2[10][5];      // Matriz (arranjo 2D): 10 alunos, 5 notas
float n3[2][10][5];   // Arranjo 3D: 2 turmas, 10 alunos, 5 notas
float n4[6][2][10][5];// Arranjo 4D: 6 escolas, 2 turmas, 10 alunos, 5 notas
#+end_src

Melhor empregar constantes

#+begin_src C
#define N_NOTAS 5
#define N_ALUNOS 10
#define N_TURMAS 2
#define N_ESCOLAS 6

float n1[N_NOTAS];                                // Vetor (arranjo 1D)
float n2[N_ALUNOS][N_NOTAS];                      // Matriz (arranjo 2D)
float n3[N_TURMAS][N_ALUNOS][N_NOTAS];            // Arranjo 3D
float n4[N_ESCOLAS][N_TURMAS][N_ALUNOS][N_NOTAS]; // Arranjo 4D
#+end_src

Ao acessar, usar índices específicos para cada dimensão.

* Revisão String -- Uma =string= é um arranjo de caracteres

Na linguagem C
- Tem um marcador de fim: '\0' (caractere ASCII da posição zero)
#+begin_src C
char caractere[9] = "Brasil";
#+end_src
#+attr_latex: :center nil
|   | 0 | 1 | 2 | 3 | 4 | 5 | 6  | 7 |  8 |
| / | < | < | < | < | < | < | <  | < | <> |
|---+---+---+---+---+---+---+----+---+----|
|   | B | r | a | s | i | l | \0 |   |    |
|---+---+---+---+---+---+---+----+---+----|

- Toda =string= é um vetor de caracteres
- Mas /nem todo vetor de caracteres é uma string/ \\
  \to Pode não apresentar o marcador de fim

*Literais strings* são representadas sempre por aspas duplas

Assim, "A" e 'A' são coisas diferentes!
- "A" é um vetor de 2 caracteres; 'A' é um caractere

* #1 (nome de alunos, 3\times notas, média)

Para uma turma de NALUNOS alunos, para cada aluno: ler o nome do aluno
(até 12 caracteres); ler as 3 notas obtidas por este aluno; calcular a
média obtida.

#+latex: \pause\vfill

Vamos _simplificar_
- Ler apenas os nomes dos NALUNOS (até 12 caracteres)
  - Vamos usar uma /string/ auxiliar de validação e controle

* (#1) Code ~a17-nomes.c~

#+latex: \vspace{-0.3cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a17-nomes.c
#include <stdio.h>
#include <string.h>
#define NALUNOS 2
#define NOME_MAX 12 //maior qtadade de caracteres
#define AUXILIAR_MAX 200
int main() {
  //nome com tamanho máximo de 12 caracteres
  char nome[NALUNOS][NOME_MAX+1];
  //variável auxiliar na leitura da cada nome
  char aux[AUXILIAR_MAX];
  //índice para os nomes
  int a;

  // leitura dos dados
  for (a = 0; a < NALUNOS; a++){
    printf("Dados do aluno %d:\n" , a + 1);

    //Vamos ler o nome na variável auxiliar
    do{
      printf("\t Nome: ");
      fgets(aux, AUXILIAR_MAX, stdin);
      aux[strlen(aux)-1] = '\0'; //remove o \n
      //informa do problema
      if(strlen(aux) > NOME_MAX){
	  printf("Nome muito longo (%d bytes), "
		 "deve ser %d bytes no máximo.\n",
		 strlen(aux), NOME_MAX);
      }
    }while(strlen(aux) > NOME_MAX);

    //Vamos copiar para destino final
    strncpy (nome[a], aux, NOME_MAX);
  }

  //imprimir todos os nomes lidos
  for (a = 0; a < NALUNOS; a++){
    printf("Aluno %d: \"%s\"\n", a+1, nome[a]);
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}

* #1 (nome de alunos, 3\times notas, média)

Para uma turma de NALUNOS alunos, para cada aluno: ler o nome do aluno
(até 12 caracteres); ler as 3 notas obtidas por este aluno; calcular a
média obtida.

* (#1) Code ~a17-turma.c~

#+latex: \vspace{-0.3cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a17-turma.c
#include <stdio.h>
#include <string.h>
#define NALUNOS 2
#define NNOTAS 3 //quantidade de notas
#define NOME_MAX 12 //maior qtadade de caracteres
#define AUXILIAR_MAX 200
int main() {
  //com a média calculada na última coluna
  float nota[NALUNOS][NNOTAS+1];
  //nome com tamanho máximo de 12 caracteres
  char nome[NALUNOS][NOME_MAX+1];
  //variável para auxilair na leitura da cada nome
  char aux[AUXILIAR_MAX];
  //índice para os nomes e notas
  int a, n;
  //acumulador das notas para média
  float soma;

  // leitura de dados
  for (a = 0; a < NALUNOS; a++){
    printf("Dados do aluno %d:\n" , a + 1);
    printf("\t Nome: ");

    //Vamos ler o nome na variável auxiliar
    fgets(aux, AUXILIAR_MAX, stdin);
    aux[strlen(aux)-1] = '\0'; //remove o \n
    while(strlen(aux) > NOME_MAX){
      printf("Nome muito longo (%d bytes), "
	     "deve ser %d bytes no máximo.\n",
	     strlen(aux), NOME_MAX);
      printf("\t Nome: ");
      fgets(aux, AUXILIAR_MAX, stdin);
      aux[strlen(aux)-1] = '\0'; //remove o \n
    }

    //Vamos copiar para destino final
    strncpy (nome[a], aux, NOME_MAX);

    //Vamos ler as três notas
    soma = 0;
    for (n = 0; n < NNOTAS; n++){
      printf("\t Nota %d: ", n + 1);
      scanf("%f", &nota[a][n]);
      soma += nota[a][n];
      //limpa o buffer de entrada
      char c;
      while ((c = getchar()) != '\n' && c != EOF);
    }
    nota[a][n] = soma / NNOTAS;
  }

  //imprimir todos os nomes lidos
  for (a = 0; a < NALUNOS; a++){
    printf("Aluno %d: \"%s\", com notas: ",
	   a+1, nome[a]);
    for (n = 0; n < NNOTAS; n++){
      printf("%.2f ", nota[a][n]);
    }
    printf("e média %.2f.\n", nota[a][n]);
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}

* (#1++) Code ~a17-conceito.c~ (com *conceito*)

#+latex: \vspace{-0.3cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a17-conceito.c
#include <stdio.h>
#include <string.h>
#define NALUNOS 2
#define NNOTAS 3 //quantidade de notas
#define NOME_MAX 12 //maior qtadade de caracteres
#define AUXILIAR_MAX 200
int main() {
  //vetor com os conceitos de cada aluno
  char conceito[NALUNOS];
  //com a média calculada na última coluna
  float nota[NALUNOS][NNOTAS+1];
  //nome com tamanho máximo de 12 caracteres
  char nome[NALUNOS][NOME_MAX+1];
  //variável para auxilair na leitura da cada nome
  char aux[AUXILIAR_MAX];
  //índice para os nomes e notas
  int a, n;
  //acumulador das notas para média
  float soma;
  // leitura de dados
  for (a = 0; a < NALUNOS; a++){
    printf("Dados do aluno %d:\n" , a + 1);
    printf("\t Nome: ");
    //Vamos ler o nome na variável auxiliar
    fgets(aux, AUXILIAR_MAX, stdin);
    aux[strlen(aux)-1] = '\0'; //remove o \n
    while(strlen(aux) > NOME_MAX){
      printf("Nome muito longo (%d bytes), "
	     "deve ser %d bytes no máximo.\n",
	     strlen(aux), NOME_MAX);
      printf("\t Nome: ");
      fgets(aux, AUXILIAR_MAX, stdin);
      aux[strlen(aux)-1] = '\0'; //remove o \n
    }
    //Vamos copiar para destino final
    strncpy (nome[a], aux, NOME_MAX);
    //Vamos ler as três notas
    soma = 0;
    for (n = 0; n < NNOTAS; n++){
      printf("\t Nota %d: ", n + 1);
      scanf("%f", &nota[a][n]);
      soma += nota[a][n];
      //limpa o buffer de entrada
      char c;
      while ((c = getchar()) != '\n' && c != EOF);
    }
    nota[a][n] = soma / NNOTAS;
    //Define conceito
    if (nota[a][n] > 8.5) conceito[a] = 'A';
    else if (nota[a][n] > 7.5) conceito[a] = 'B';
    else if (nota[a][n] > 6.0) conceito[a] = 'C';
    else conceito[a] = 'D';
  }
  //imprimir
  for (a = 0; a < NALUNOS; a++){
    printf("Aluno %d: \"%s\", com notas: ",
	   a+1, nome[a]);
    for (n = 0; n < NNOTAS; n++){
      printf("%.2f ", nota[a][n]);
    }
    printf("média %f, conceito %c\n",
	   nota[a][n], conceito[a]);
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}

* #2 (matriz esparsa para condensada)

Uma *matriz esparsa* é uma matriz que tem muitos elementos iguais a zero
(tipicamente mais que 2/3 de zeros já configura uma matriz esparsa).

Fazer um programa que:

1. Preencher uma matriz de ordem N com números naturais aleatoriamente
   distribuídos entre 0 e 9. Ao preencher, garanta que a matriz será
   esparsa preenchendo tipicamente 2/3 das posições com zeros (será
   aproximadamente 2/3 de N*N). Pode-se utilizar o resultado de =rand()=
   para decidir se devemos gerar um zero ou outro número (1 a 9).

2. Converter a matriz esparsa gerada em um formato condensado apenas
   com os elementos não nulos. Esta matriz em formato "condensado"
   terá três colunas, onde cada linha guarda um valor não nulo:
   1. Contém o valor
   2. Contém a linha do valor 
   3. Contém a coluna

* (#2) Exemplo

#+BEGIN_EXPORT latex
\begin{bmatrix}
0 & 0 & -1 & 0 & 2 \\
-3 & 0 & 0 & 4 & 0 \\
0 & -5 & 0 & 0 & 0 \\
0 & 0 & 0 & 6 & 0 \\
0 & -7 & 0 & 6 & 8 \\
\end{bmatrix}\to
\begin{bmatrix}
-1 & 0 & 2 \\
 2 & 0 & 4 \\
-3 & 1 & 0 \\
 4 & 1 & 3 \\
-5 & 2 & 2 \\
 6 & 3 & 3 \\
-7 & 4 & 1 \\
 6 & 4 & 3 \\
 8 & 4 & 4 \\
\end{bmatrix}
#+END_EXPORT

* (#2) Code

#+latex: \vspace{-0.3cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\tiny
#+BEGIN_SRC C :tangle e/a17-esparsa.c
#include <stdio.h>
#include <stdlib.h>
#define N 5 // ordem
#define MIN 0
#define MAX 9
int main() {
  //a matriz esparsa
  int esparsa[N][N] = {0};
  //a matriz condensada com mais ou menos 1/3 dados
  int condensada[(N*N)/3+1][3] = {0};
  //índices da esparsa
  int l, c;
  //índice linha da condensada
  int lc;

  srand(0);

  //geração dos dados esparsos
  for (l = 0; l < N; l++) {
    for (c = 0; c < N; c++) {
      int aleatorio = rand();
      if (aleatorio < 2*(float)RAND_MAX/3){
	   esparsa[l][c] = 0;
      }else{
	   esparsa[l][c] = MIN +
	     (aleatorio % (MAX-MIN+1));
      }
    }
  }



  //percorre esparsa
  lc = 0; //zero o índice da condensada
  for (l = 0; l < N; l++) {
    for (c = 0; c < N; c++) {
      if(esparsa[l][c]){
	  condensada[lc][0] = esparsa[l][c];
	  condensada[lc][1] = l;
	  condensada[lc][2] = c;
	  lc++;
      }
    }
  }

  //imprime
  printf("\n");
  printf("Esparsa\n");
  for (l = 0; l < N; l++) {
    for (c = 0; c < N; c++) {
      printf("%2d ", esparsa[l][c]);
    }
    printf("\n");
  }

  //imprime
  printf("Condensada\n");
  for (l = 0; l < (N*N)/3+1; l++) {
    for (c = 0; c < 3; c++) {
      printf("%2d ", condensada[l][c]);
    }
    printf("\n");
  }
  return 0;
}
#+END_SRC
#+latex: \end{multicols}

* (#2) Teste

#+BEGIN_EXPORT latex
\begin{tiny}
\begin{bmatrix}
0 & 0 & -1 & 0 & 2 \\
-3 & 0 & 0 & 4 & 0 \\
0 & -5 & 0 & 0 & 0 \\
0 & 0 & 0 & 6 & 0 \\
0 & -7 & 0 & 6 & 8 \\
\end{bmatrix}\to
\begin{bmatrix}
-1 & 0 & 2 \\
 2 & 0 & 4 \\
-3 & 1 & 0 \\
 4 & 1 & 3 \\
-5 & 2 & 2 \\
 6 & 3 & 3 \\
-7 & 4 & 1 \\
 6 & 4 & 3 \\
 8 & 4 & 4 \\
\end{bmatrix}
\end{tiny}
#+END_EXPORT

Vejamos

#+latex: {\tiny

#+attr_latex: :options fontsize=\tiny
#+begin_src bash :results output :session :exports both :dir e
gcc a17-esparsa.c
echo "0 0 -1 0 2 -3 0 0 4 0 0 -5 0 0 0 0 0 0 6 0 0 -7 0 6 8" | ./a.out
#+END_SRC

#+RESULTS:
#+begin_example

Esparsa
 3  0  7  5  3 
 0  0  2  0  0 
 0  0  0  0  3 
 6  0  6  0  0 
 0  0  0  9  0 
Condensada
 3  0  0 
 7  0  2 
 5  0  3 
 3  0  4 
 2  1  2 
 3  2  4 
 6  3  0 
 6  3  2 
 9  4  3 
#+end_example

#+latex: }

* #3 (permutação de palavra)

Uma palavra é a permutação circular de outra se for obtida com a
transferência do caractere do início para o fim da mesma.

AROMA \rightarrow ROMAA \rightarrow OMAAR \rightarrow MAARO \rightarrow AAROM \rightarrow AROMA

Faça um programa que leia uma string de até 16 caracteres e informe a
permutação circular da palavra lida, preservando a entrada.

* (#3) Code

#+latex: \vspace{-0.3cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\scriptsize
#+BEGIN_SRC C :tangle e/a17-permuta.c
// Gera permutação circular
#include <stdio.h>
#include <string.h>
#define SIZEPAL 16
int main() {
  //a palavra lida
  char palavra[SIZEPAL+1];
  //a palavra permutada
  char permuta[SIZEPAL+1];
  //para salvar tamanho
  int tamanho;
  //índice de percorrimento na string
  int i;

  //Vamos ler a palavra
  printf("Palavra: ");
  fgets(palavra, SIZEPAL, stdin);
  tamanho = strlen(palavra);
  //remove o \n
  palavra[tamanho-1] = '\0';

  //atualiza tamanho
  tamanho = strlen(palavra);

  printf("\n\nPalavra: [%s]\n",palavra);

  // do 1 até penúltimo caractere
  // recebem o da posição posterior
  for (i = 0; i < (tamanho-1); i++){
    permuta[i] = palavra[i+1];
  }
  // último caractere da permuta
  // recebe primeiro da palavra
  permuta[i] = palavra[0];
  // inserir terminador
  permuta[i+1] = '\0';

  printf("Permuta: [%s]\n",permuta);
  return 0;
}
#+END_SRC
#+latex: \end{multicols}

#+latex: \pause\vfill

O que acontece se ~#define SIZEPAL 3~?

* #4.1 (diagonal)

1. Preencher uma matriz de ordem N com números naturais aleatoriamente
   distribuídos entre 0 e 9.
2. Calcular e imprimir a média dos elementos da diagonal principal.

| / | <      | <      | <      | <      | <>     |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        |        |        |        |
|---+--------+--------+--------+--------+--------|
|   |        | \mblue |        |        |        |
|---+--------+--------+--------+--------+--------|
|   |        |        | \mblue |        |        |
|---+--------+--------+--------+--------+--------|
|   |        |        |        | \mblue |        |
|---+--------+--------+--------+--------+--------|
|   |        |        |        |        | \mblue |
|---+--------+--------+--------+--------+--------|

* (#4.1) Code

#+latex: \vspace{-0.3cm}\begin{multicols}{2}
#+attr_latex: :options fontsize=\scriptsize
#+BEGIN_SRC C :tangle e/a17-diagonal.c
#include <stdio.h>
#include <stdlib.h>
//Limites da nossa matriz
#define ORDEM 15
//Limites de valores aleatórios
#define MIN 1
#define MAX 99
int main(){
  //A matriz m e seus índices
  int m[ORDEM][ORDEM] = {0};
  int l, c;
  //acumulador da soma
  int soma;

  // Define a semente para aleatórios
  srand(0);

  // inicializar a matriz
  // com valores aleatórios
  for (l = 0; l < ORDEM; l++)
    for (c = 0; c < ORDEM; c++)
      m[l][c] = MIN+(rand()%(MAX-MIN+1));

  // somatório da diagonal principal
  soma = 0;
  for (l = 0; l < ORDEM; l++){
    soma += m[l][l];
  }

  // imprimir a matriz
  printf("Matriz\n");
  for (l = 0; l < ORDEM; l++){
    for (c = 0; c < ORDEM; c++)
      printf("%2d ", m[l][c]);
    printf("\n");
  }
  printf("Média da diagonal: %.2f\n",
	 (float)soma/ORDEM);
  return 0;
}
#+END_SRC
#+latex: \end{multicols}

* Exercício #1 (diferentes formas geométricas)

Para cada exemplo de matriz de ordem N abaixo
1. Preencher uma matriz de ordem N com números naturais aleatoriamente
   distribuídos entre 0 e 9.
2. Calcular e imprimir a média dos elementos das áreas assinaladas

#+latex: \vfill

** M1                                                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.15
:END:

#+ATTR_LATEX: :center nil
| / | < | <      | <      | <      | <> |
|---+---+--------+--------+--------+----|
|   |   |        |        |        |    |
|---+---+--------+--------+--------+----|
|   |   | \mblue | \mblue | \mblue |    |
|---+---+--------+--------+--------+----|
|   |   | \mblue | \mblue | \mblue |    |
|---+---+--------+--------+--------+----|
|   |   | \mblue | \mblue | \mblue |    |
|---+---+--------+--------+--------+----|
|   |   |        |        |        |    |
|---+---+--------+--------+--------+----|

** M2                                                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.15
:END:

#+ATTR_LATEX: :center nil
| / | <      | <      | <      | <      | <>     |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        |        |        | \mblue |
|---+--------+--------+--------+--------+--------|
|   | \mblue | \mblue |        |        |        |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        | \mblue |        | \mblue |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        |        | \mblue |        |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        |        |        | \mblue |
|---+--------+--------+--------+--------+--------|

** M3                                                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.15
:END:

#+ATTR_LATEX: :center nil
| / | <      | <      | <      | <      | <>     |
|---+--------+--------+--------+--------+--------|
|   | \mblue | \mblue | \mblue |        |        |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        |        |        |        |
|---+--------+--------+--------+--------+--------|
|   | \mblue | \mblue | \mblue | \mblue |        |
|---+--------+--------+--------+--------+--------|
|   | \mblue |        |        |        |        |
|---+--------+--------+--------+--------+--------|
|   | \mblue | \mblue | \mblue | \mblue | \mblue |
|---+--------+--------+--------+--------+--------|

**                                                         :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+latex: \vfill

** M4                                                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.15
:END:

#+ATTR_LATEX: :center nil
| / | < | <      | <      | <      | <>     |
|---+---+--------+--------+--------+--------|
|   |   | \mblue | \mblue | \mblue | \mblue |
|---+---+--------+--------+--------+--------|
|   |   |        | \mblue | \mblue | \mblue |
|---+---+--------+--------+--------+--------|
|   |   |        |        | \mblue | \mblue |
|---+---+--------+--------+--------+--------|
|   |   |        |        |        | \mblue |
|---+---+--------+--------+--------+--------|
|   |   |        |        |        |        |
|---+---+--------+--------+--------+--------|

** M5                                                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.15
:END:

#+ATTR_LATEX: :center nil
| / | <      | <      | <      | <      | <> |
|---+--------+--------+--------+--------+----|
|   | \mblue | \mblue | \mblue | \mblue |    |
|---+--------+--------+--------+--------+----|
|   | \mblue | \mblue | \mblue |        |    |
|---+--------+--------+--------+--------+----|
|   | \mblue | \mblue |        |        |    |
|---+--------+--------+--------+--------+----|
|   | \mblue |        |        |        |    |
|---+--------+--------+--------+--------+----|
|   |        |        |        |        |    |
|---+--------+--------+--------+--------+----|

** M6                                                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.15
:END:

#+ATTR_LATEX: :center nil
| / | < | <      | <      | <      | <> |
|---+---+--------+--------+--------+----|
|   |   | \mblue | \mblue | \mblue |    |
|---+---+--------+--------+--------+----|
|   |   |        | \mblue |        |    |
|---+---+--------+--------+--------+----|
|   |   |        |        |        |    |
|---+---+--------+--------+--------+----|
|   |   |        | \mblue |        |    |
|---+---+--------+--------+--------+----|
|   |   | \mblue | \mblue | \mblue |    |
|---+---+--------+--------+--------+----|

* Exercício #2 (multiplicação de matrizes)

Seja
- A uma matriz de dimensão r x s
- B uma matriz de dimensão s x t.

Faça um programa que calcula o produto de A x B, resultando em uma
matriz C de dimensão r x t.

#+latex: \vfill

Exemplo

#+BEGIN_EXPORT latex
\begin{scriptsize}
$$
\begin{bmatrix}
1 & 2 & 3 & 4 \\
5 & 6 & 7 & 8 \\
\end{bmatrix}
\times
\begin{bmatrix}
1 & 2 \\
3 & 4 \\
5 & 6 \\
7 & 8 \\
\end{bmatrix}
=
\begin{bmatrix}
1*1+2*3+3*5+4*7 & 1*2+2*4+3*6+4*8 \\
5*1+6*3+7*5+8*7 & 5*2+6*4+7*6+8*8
\end{bmatrix}
\end{small}
#+END_EXPORT

* Estudo de caso para multiplicação de matrizes

Uma pessoa preparou três receitas usando quatro ingredientes em
proporções variadas, conforme a tabela 1.  Os preços unitários dos
ingredientes constam da tabela 2.  Determine a matriz (tabela 3) que
registra o preço total de cada Receita.

#+latex: \vfill

Tabela #1

| Receita | A | B | C | D |
|---------+---+---+---+---|
|       1 | 3 | 6 | 1 | 3 |
|       2 | 4 | 4 | 2 | 2 |
|       3 | 0 | 1 | 1 | 6 |

Tabela #2

| Ingrediente | Valor |
|-------------+-------|
| A           |   0.2 |
| B           |   0.8 |
| C           |   1.2 |
| D           |   2.8 |

* Desafio

*Parte #1* (básica)

Um campo de pedras preciosas pode ser representado por uma
matriz. Faça um programa que distribua, em posições aleatórias, uma
quantidade específica de pedras preciosas. Em um segundo momento, para
todas as posições onde não existem pedras preciosas, defina a
quantidade de vizinhos (norte, sul, leste, oeste) com pedras
preciosas. A quantidade de pedras preciosas deve ser definida como uma
porcentagem da quantidade de posições possíveis da matriz.

#+latex: \vfill

*Parte #2* (avançado)

Transforme em um jogo com interação do usuário.
- As posições devem estar reveladas ou não
- A cada passo, o usuário escolhe uma coordenada
  - Programa revela aquela posição
    - Se for pedra preciosas, parabéns, você encontrou!
    - Se não for pedra preciosa, revela o espaço livre de pedras preciosas no entorno

